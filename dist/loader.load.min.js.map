{"version":3,"sources":["src/loader.load.css.mjs","src/loader.load.html.mjs","src/loader.load.image.mjs","src/loader.load.javascript.mjs","src/loader.load.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","this","css","async","blob","options","element","document","url","URL","createObjectURL","sheet","CSSStyleSheet","replace","revokeObjectURL","adoptedStyleSheets","html","reader","FileReader","promise","Promise","resolve","addEventListener","buffer","srcElement","result","readAsText","filter","length","DOMParser","parseFromString","body","querySelectorAll","map","x","outerHTML","reduce","y","HTMLElement","innerHTML","image","HTMLImageElement","Image","reject","onload","onerror","Error","type","src","javascript","import","[object Object]","loaders","loader","keys","split","key","TypeError"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAC9D,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAO,SAAUH,IAC7DD,EAASA,GAAUM,MAAaC,OAASN,IAH9C,CAIEO,KAAM,WAAe,aAEnB,IAAIC,EAAMC,MAAOC,EAAMC,KACnBA,EAAU,CAAOC,QAASC,SAAYF,QAAAA,GAEtC,MAAMG,EAAMC,IAAIC,gBAAgBN,GAE1BO,EAAQ,IAAIC,cAgBlB,aAdMD,EAAME,wBAAwBL,OAEpCC,IAAIK,gBAAgBN,GAGW,iBAApBH,EAAQC,SACf,uBAAwBD,EAAQC,UAEhCD,EAAQC,QAAQS,mBAAqB,IAC9BV,EAAQC,QAAQS,mBACnBJ,IAIDA,GAGPK,EAAOb,MAAOC,EAAMC,KACpB,MAAMY,EAAS,IAAIC,WAEbC,EAAU,IAAIC,QAASC,GACzBJ,EAAOK,iBAAiB,UAAYC,GAChCF,EAAQE,EAAOC,WAAWC,UAIlCR,EAAOS,WAAWtB,GAElB,IAAIqB,QAAeN,EAyBnB,OAtBId,GAC0B,iBAAnBA,EAAQsB,QACftB,EAAQsB,OAAOC,SAIfH,GADAA,EAAS,KADTA,GAAS,IAAII,WAAYC,gBAAgBL,EAAQ,aAAaM,MAC1CC,iBAAiB3B,EAAQsB,UAC7BC,OACVH,EAAOQ,IAAKC,GAAMA,EAAEC,WAAWC,OAAO,CAACF,EAAGG,IAAMH,EAAIG,GACpDZ,GAINpB,GACAA,EAAQC,SACRD,EAAQC,mBAAmBgC,aAC3Bb,GACkB,iBAAXA,GACPA,EAAOG,SAEPvB,EAAQC,QAAQiC,UAAYd,GAGzBN,GAGPqB,EAAQrC,MAAOC,EAAMC,KACrB,MAAMmC,EACFnC,GAAWA,EAAQC,mBAAmBmC,iBAChCpC,EAAQC,QACR,IAAIoC,MAERlC,EAAMC,IAAIC,gBAAgBN,GAE1Be,EAAU,IAAIC,QAAQ,CAACC,EAASsB,KAClCH,EAAMI,OAASvB,EACfmB,EAAMK,QAAU,KACZF,EAAO,IAAIG,6BAA6B1C,EAAK2C,YAGrDP,EAAMQ,IAAMxC,EAEZ,MAAMiB,QAAeN,EAIrB,OAFAV,IAAIK,gBAAgBN,GAEbiB,GAGPwB,EAAa9C,MAAOC,IACpB,MAAMI,EAAMC,IAAIC,gBAAgBN,GAE1BqB,QAAeyB,OAAO1C,GAI5B,OAFAC,IAAIK,gBAAgBN,GAEbiB,GAoCX,OAjCkB,IAAI,MAClB0B,cACIlD,KAAKmD,QAAU,CACXZ,MAAOA,EACPxB,KAAMA,EACNd,IAAKA,EACL+C,WAAYA,GAIpBE,SAASJ,EAAMM,GACXpD,KAAKmD,QAAQL,GAAQM,EAGzBF,WAAW/C,EAAMC,GACb,MAAM0C,EAAO3C,EAAK2C,KAEZO,EAAOP,EAAKQ,MAAM,KAAKnB,OAAO,CAACF,EAAGG,IAAM,CAACU,EAAMb,EAAGG,IAExD,IAAK,MAAMmB,KAAOF,EAAM,CACpB,MAAMD,EAASC,EAAKE,GAEpB,GAAIH,KAAUpD,KAAKmD,QACf,aAAanD,KAAKmD,QAAQC,GAAQjD,EAAMC,GAIhD,MAAM,IAAIoD,qBACKrD,EAAK2C","sourcesContent":["export default async (blob, options) => {\n    //\n    options = { ...{ element: document }, options };\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const sheet = new CSSStyleSheet();\n\n    //\n    await sheet.replace(`@import url(\"${url}\")`);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    if (\n        typeof options.element === \"object\" &&\n        \"adoptedStyleSheets\" in options.element\n    ) {\n        options.element.adoptedStyleSheets = [\n            ...options.element.adoptedStyleSheets,\n            sheet,\n        ];\n    }\n\n    //\n    return sheet;\n};\n","export default async (blob, options) => {\n    //\n    const reader = new FileReader();\n\n    //\n    const promise = new Promise((resolve) =>\n        reader.addEventListener(\"loadend\", (buffer) =>\n            resolve(buffer.srcElement.result)\n        )\n    );\n\n    //\n    reader.readAsText(blob);\n\n    //\n    let result = await promise;\n\n    //\n    if (\n        options &&\n        typeof options.filter === \"string\" &&\n        options.filter.length\n    ) {\n        //\n        result = new DOMParser().parseFromString(result, \"text/html\").body;\n        //\n        result = [...result.querySelectorAll(options.filter)];\n        //\n        result = result.length\n            ? result.map((x) => x.outerHTML).reduce((x, y) => x + y)\n            : result;\n    }\n\n    //\n    if (\n        options &&\n        options.element &&\n        options.element instanceof HTMLElement &&\n        result &&\n        typeof result === \"string\" &&\n        result.length\n    ) {\n        options.element.innerHTML = result;\n    }\n\n    //\n    return promise;\n};\n","export default async (blob, options) => {\n    //\n    const image =\n        options && options.element instanceof HTMLImageElement\n            ? options.element\n            : new Image();\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const promise = new Promise((resolve, reject) => {\n        image.onload = resolve;\n        image.onerror = () =>\n            reject(new Error(`Error loading image ${blob.type}`));\n    });\n\n    //\n    image.src = url;\n\n    //\n    const result = await promise;\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","export default async (blob) => {\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const result = await import(url);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","import css from \"./loader.load.css.mjs\";\nimport html from \"./loader.load.html.mjs\";\nimport image from \"./loader.load.image.mjs\";\nimport javascript from \"./loader.load.javascript.mjs\";\n\n/**\n *\n */\nexport default new (class LoaderLoad {\n    constructor() {\n        // loaders closure, filled with default loaders\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n        this.loaders = {\n            image: image,\n            html: html,\n            css: css,\n            javascript: javascript,\n        };\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        this.loaders[type] = loader;\n    }\n\n    /**\n     * Loads a resource, which usually consists in attaching it to an existent DOM element\n     * @private\n     * @param {Blob} blob The resource to be loaded in Blob form\n     * @param {Object} options The resource load options\n     * @returns {Promise} The resource load in promise form\n     */\n    async load(blob, options) {\n        const type = blob.type;\n\n        //...\n        const keys = type.split(\"/\").reduce((x, y) => [type, x, y]);\n\n        // ...\n        for (const key in keys) {\n            const loader = keys[key];\n\n            if (loader in this.loaders) {\n                return await this.loaders[loader](blob, options);\n            }\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid ${blob.type} media type passed to Loader class \"load\" method.`\n        );\n    }\n})();\n"],"file":"loader.load.min.js"}