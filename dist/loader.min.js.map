{"version":3,"sources":["src/loader.utils.mjs","src/loader.worker.mjs","src/loader.fetch.mjs","src/loader.load.css.mjs","src/loader.load.html.mjs","src/loader.load.image.mjs","src/loader.load.javascript.mjs","src/loader.load.mjs","src/loader.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","this","a","document","createElement","getURL","path","href","URL","createFetchWorker","body","url","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createDynamicWorker","onmessage","async","event","response","fetch","data","options","blob","status","statusText","e","postMessage","lworker","[object Object]","_worker","_requests","terminate","cache","lfetch","Promise","resolve","reject","addEventListener","Error","lload","image","element","HTMLImageElement","Image","promise","onload","onerror","src","result","reader","FileReader","buffer","srcElement","readAsText","filter","length","DOMParser","parseFromString","querySelectorAll","map","x","outerHTML","reduce","y","HTMLElement","innerHTML","html","sheet","CSSStyleSheet","replace","adoptedStyleSheets","css","import","javascript","TypeError","resource","Array","isArray","isArrayOpts","i","load"],"mappings":"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","sourcesContent":["const a = document.createElement(\"a\");\n\n/**\n *\n * @param {String} path\n * @returns {URL}\n */\nexport const getURL = (path) => {\n    a.href = path;\n\n    return new URL(a.href);\n};\n","/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createDynamicWorker = (body) => {\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\",\n        })\n    );\n\n    // ...\n    const worker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    // ...\n    return worker;\n};\n\n/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createFetchWorker = () =>\n    createDynamicWorker(\n        () =>\n            (onmessage = async (event) => {\n                //\n                try {\n                    const response = await fetch(\n                        event.data.href,\n                        event.data.options\n                    );\n                    const blob = await response.blob();\n\n                    event.data.status = response.status;\n                    event.data.statusText = response.statusText;\n                    event.data.blob = blob;\n                } catch (e) {\n                    event.data.statusText = e;\n                }\n\n                // ...\n                postMessage(event.data);\n            })\n    );\n\n/**\n *\n */\nexport default new (class LoaderWorker {\n    constructor() {\n        this._worker = null;\n\n        this._requests = 0;\n    }\n\n    terminate() {\n        //\n        //\n        if (this._requests > 0) {\n            this._requests--;\n        }\n\n        //\n        if (this._requests === 0) {\n            this._worker.terminate();\n\n            this._worker = null;\n        }\n\n        //\n        return this._worker;\n    }\n\n    worker() {\n        // ...\n        this._requests++;\n\n        // ...\n        if (this._worker) {\n            return this._worker;\n        }\n\n        // ...\n        this._worker = createFetchWorker();\n\n        //\n        return this._worker;\n    }\n})();\n","import lworker from \"./loader.worker.mjs\";\n\n// ...\nconst cache = {};\n\n/**\n * Fetches a resource url in the secondary thread and retrieves it as a blob\n * @private\n * @param {String} href The resource url to be fetched\n * @param {Object} options The fetch options object\n * @returns {Promise} The fetch promise\n */\nexport default async (href, options) => {\n    // ...\n    options = {\n        ...{\n            cache: true,\n            fetch: {},\n        },\n        ...options,\n    };\n\n    // ...\n    if (options.cache === true && href in cache) {\n        return await cache[href];\n    }\n\n    // ...\n    return (cache[href] = new Promise((resolve, reject) => {\n        //\n        const worker = lworker.worker();\n\n        // ...\n        worker.postMessage({\n            href: href,\n            options: options.fetch,\n        });\n\n        // ...\n        // TODO: possibly use messageerror for reject?\n        worker.addEventListener(\"message\", (event) => {\n            const data = event.data;\n\n            // ...\n            if (data.href !== href) {\n                return;\n            }\n\n            //\n            lworker.terminate();\n\n            // ...\n            if (data.status === 200) {\n                resolve(data.blob);\n\n                return;\n            }\n\n            // ...\n            reject(new Error(`${data.statusText} for ${data.href} resource.`));\n        });\n    }));\n};\n","export default async (blob, options) => {\n    //\n    options = { ...{ element: document }, options };\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const sheet = new CSSStyleSheet();\n\n    //\n    await sheet.replace(`@import url(\"${url}\")`);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    if (\n        typeof options.element === \"object\" &&\n        \"adoptedStyleSheets\" in options.element\n    ) {\n        options.element.adoptedStyleSheets = [\n            ...options.element.adoptedStyleSheets,\n            sheet,\n        ];\n    }\n\n    //\n    return sheet;\n};\n","export default async (blob, options) => {\n    //\n    const reader = new FileReader();\n\n    //\n    const promise = new Promise((resolve) =>\n        reader.addEventListener(\"loadend\", (buffer) =>\n            resolve(buffer.srcElement.result)\n        )\n    );\n\n    //\n    reader.readAsText(blob);\n\n    //\n    let result = await promise;\n\n    //\n    if (\n        options &&\n        typeof options.filter === \"string\" &&\n        options.filter.length\n    ) {\n        //\n        result = new DOMParser().parseFromString(result, \"text/html\").body;\n        //\n        result = [...result.querySelectorAll(options.filter)];\n        //\n        result = result.length\n            ? result.map((x) => x.outerHTML).reduce((x, y) => x + y)\n            : result;\n    }\n\n    //\n    if (\n        options &&\n        options.element &&\n        options.element instanceof HTMLElement &&\n        result &&\n        typeof result === \"string\" &&\n        result.length\n    ) {\n        options.element.innerHTML = result;\n    }\n\n    //\n    return promise;\n};\n","export default async (blob, options) => {\n    //\n    const image =\n        options.element instanceof HTMLImageElement\n            ? options.element\n            : new Image();\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const promise = new Promise((resolve, reject) => {\n        image.onload = resolve;\n        image.onerror = reject;\n    });\n\n    //\n    image.src = url;\n\n    //\n    const result = await promise;\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","export default async (blob) => {\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const result = await import(url);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","import css from \"./loader.load.css.mjs\";\nimport html from \"./loader.load.html.mjs\";\nimport image from \"./loader.load.image.mjs\";\nimport javascript from \"./loader.load.javascript.mjs\";\n\n/**\n * Loads a resource, which usually consists in attaching it to an existent DOM element\n * @private\n * @param {Blob} blob The resource to be loaded in Blob form\n * @param {Object} options The resource load options\n * @returns {Promise} The resource load in promise form\n */\nexport default async (blob, options) => {\n    //...\n    // TODO: get all major mimetypes\n    switch (blob.type) {\n        //...\n        case \"image/png\":\n        case \"image/jpeg\":\n            return await image(blob, options);\n\n        //...\n        case \"text/html\":\n            return await html(blob, options);\n\n        //...\n        case \"text/css\":\n            return await css(blob, options);\n\n        //...\n        case \"text/javascript\":\n            return await javascript(blob);\n    }\n\n    // ...\n    throw new TypeError(\n        `Invalid argment of type ${typeof blob} passed to Loader class \"fetch\" method.`\n    );\n};\n","import { getURL } from \"./loader.utils.mjs\";\nimport lfetch from \"./loader.fetch.mjs\";\nimport lload from \"./loader.load.mjs\";\n\nexport default class Loader {\n    constructor() {}\n\n    /**\n     * Fetches one or more resources url\n     * @param {Array.<String>|Array.<URL>|String|URL} resource The resource(s) url to be fetched in a separate thread\n     * @param {Object} options The fetch options object\n     * @returns {Array.<Promise>|Promise} The fetch promise(s)\n     */\n    async fetch(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            return await resource.map((a) => this.fetch(a, options));\n        }\n\n        // ...\n        if (typeof resource === \"string\") {\n            return await this.fetch(getURL(resource), options);\n        }\n\n        // ...\n        if (resource instanceof URL) {\n            return await lfetch(resource.href, options);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof resource} passed to Loader class \"fetch\" method.`\n        );\n    }\n\n    /**\n     * Loads one or more resources url considering the passed options object and the resource mime type to be loaded\n     * @param {Array.<String>|Array.<URL>|Array.<Blob>|String|URL|Blob} resource The resource(s) to be loaded\n     * @param {Object} options The loader type options\n     * @returns {Array.<Promise>|Promise} The load promise(s)\n     */\n    async load(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            const isArrayOpts = Array.isArray(options);\n\n            return await resource.map((a, i) =>\n                this.load(a, isArrayOpts ? options[i] : options)\n            );\n        }\n\n        // ...\n        const blob =\n            resource instanceof Blob\n                ? resource\n                : await this.fetch(resource, options);\n\n        // ...\n        return await lload(blob, options);\n    }\n}\n"],"file":"loader.min.js"}