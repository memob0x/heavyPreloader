{"version":3,"sources":["src/loader.worker.mjs","src/loader.fetch.mjs","src/loader.load.css.mjs","src/loader.load.html.mjs","src/loader.load.image.mjs","src/loader.load.javascript.mjs","src/loader.load.mjs","src/loader.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","this","body","onmessage","async","event","response","fetch","data","href","options","blob","status","statusText","e","postMessage","lworker","requests","cache","lfetch","Promise","resolve","reject","worker","url","URL","createObjectURL","Blob","toString","type","Worker","revokeObjectURL","get","addEventListener","terminate","Error","lload","el","Image","promise","onload","onerror","src","result","image","reader","FileReader","buffer","srcElement","readAsText","innerHTML","html","document","sheet","CSSStyleSheet","replace","adoptedStyleSheets","css","import","javascript","TypeError","[object Object]","cors","arg","Array","isArray","map","a","createElement","load"],"mappings":"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","sourcesContent":["/**\n *\n * @private\n * @static\n */\nconst body = () =>\n    (onmessage = async (event) => {\n        //\n        try {\n            const response = await fetch(event.data.href, event.data.options);\n            const blob = await response.blob();\n\n            event.data.status = response.status;\n            event.data.statusText = response.statusText;\n            event.data.blob = blob;\n        } catch (e) {\n            event.data.statusText = e;\n        }\n\n        // ...\n        postMessage(event.data);\n    });\n\n// ...\nlet lworker = null;\nlet requests = 0;\n\n/**\n *\n * @private\n */\nexport const get = () => {\n    // ...\n    requests++;\n\n    // ...\n    if (lworker) {\n        return lworker;\n    }\n\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\",\n        })\n    );\n\n    // ...\n    lworker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    //\n    return lworker;\n};\n\n/**\n *\n * @private\n */\nexport const terminate = () => {\n    //\n    requests--;\n\n    //\n    if (requests <= 0) {\n        lworker.terminate();\n\n        lworker = null;\n    }\n};\n","import * as lworker from \"./loader.worker.mjs\";\n\n// ...\nconst cache = {};\n\n/**\n *\n * @private\n * @param {String} href\n * @param {Object} options\n */\nexport default async (href, options = {}) => {\n    // ...\n    if (href in cache) {\n        return await cache[href];\n    }\n\n    // ...\n    return (cache[href] = new Promise((resolve, reject) => {\n        //\n        const worker = lworker.get();\n\n        // ...\n        worker.postMessage({\n            href: href,\n            options: options.fetch,\n        });\n\n        // ...\n        // TODO: possibly use messageerror for reject?\n        worker.addEventListener(\"message\", (event) => {\n            const data = event.data;\n\n            // ...\n            if (data.href !== href) {\n                return;\n            }\n\n            //\n            lworker.terminate();\n\n            // ...\n            if (data.status === 200) {\n                resolve(data.blob);\n\n                return;\n            }\n\n            // ...\n            reject(new Error(`${data.statusText} for ${data.href} resource.`));\n        });\n    }));\n};\n","export default async (blob, el = document) => {\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const sheet = new CSSStyleSheet();\n\n    //\n    await sheet.replace(`@import url(\"${url}\")`);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    if (\"adoptedStyleSheets\" in el) {\n        el.adoptedStyleSheets = [...el.adoptedStyleSheets, sheet];\n    }\n\n    //\n    return sheet;\n};\n","export default async (blob, el) => {\n    //\n    const reader = new FileReader();\n\n    //\n    const promise = new Promise((resolve) =>\n        reader.addEventListener(\"loadend\", (buffer) =>\n            resolve(buffer.srcElement.result)\n        )\n    );\n\n    //\n    reader.readAsText(blob);\n\n    //\n    const result = await promise;\n\n    //\n    if (el && typeof el === \"object\" && \"innerHTML\" in el) {\n        el.innerHTML = result;\n    }\n\n    //\n    return promise;\n};\n","export default async (blob, el = new Image()) => {\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const promise = new Promise((resolve, reject) => {\n        el.onload = resolve;\n        el.onerror = reject;\n    });\n\n    //\n    el.src = url;\n\n    //\n    const result = await promise;\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","export default async (blob) => {\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const result = await import(url);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","import css from \"./loader.load.css.mjs\";\nimport html from \"./loader.load.html.mjs\";\nimport image from \"./loader.load.image.mjs\";\nimport javascript from \"./loader.load.javascript.mjs\";\n\n/**\n *\n * @param {Blob} blob\n * @param {HTMLElement} el\n */\nexport default async (blob, el) => {\n    //...\n    switch (blob.type) {\n        //...\n        case \"image/png\":\n        case \"image/jpeg\":\n            return await image(blob, el);\n\n        //...\n        case \"text/html\":\n            return await html(blob, el);\n\n        //...\n        case \"text/css\":\n            return await css(blob, el);\n\n        //...\n        case \"text/javascript\":\n            return await javascript(blob);\n    }\n\n    // ...\n    throw new TypeError(\n        `Invalid argment of type ${typeof blob} passed to Loader class \"fetch\" method.`\n    );\n};\n","import lfetch from \"./loader.fetch.mjs\";\nimport lload from \"./loader.load.mjs\";\n\nexport default class Loader {\n    /**\n     *\n     * @param {Object} options\n     */\n    constructor(options) {\n        this.options = {\n            ...{ fetch: { cors: \"no-cors\" } },\n            ...options,\n        };\n    }\n\n    /**\n     *\n     * @param {Array.<String>|Array.<URL>|String|URL} arg\n     * @returns {Array.<Promise>|Promise}\n     */\n    async fetch(arg) {\n        // ...\n        if (Array.isArray(arg)) {\n            return await arg.map((a) => this.fetch(a));\n        }\n\n        // ...\n        if (typeof arg === \"string\") {\n            const a = document.createElement(\"a\");\n\n            a.href = arg;\n\n            return await this.fetch(new URL(a));\n        }\n\n        // ...\n        if (arg instanceof URL) {\n            return await lfetch(arg.href, this.options);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof arg} passed to Loader class \"fetch\" method.`\n        );\n    }\n\n    /**\n     *\n     * @param {Array.<String>|Array.<URL>|String|URL} arg\n     * @returns {Array.<Promise>|Promise}\n     */\n    async load(arg, el) {\n        // ...\n        if (Array.isArray(arg)) {\n            return await arg.map((a) => this.load(a, el));\n        }\n\n        // ...\n        const blob = await this.fetch(arg);\n\n        // ...\n        return await lload(blob, el);\n    }\n}\n"],"file":"loader.min.js"}