{"version":3,"file":"loader.min.js","sources":["../src/loader.utils.mjs","../src/loader.worker.mjs","../src/loader.fetch.mjs","../src/loader.load.css.mjs","../src/loader.load.html.mjs","../src/loader.load.image.mjs","../src/loader.load.javascript.mjs","../src/loader.load.mjs","../src/loader.mjs"],"sourcesContent":["const a = document.createElement(\"a\");\n\n/**\n *\n * @param {String} path\n * @returns {URL}\n */\nexport const getURL = (path) => {\n    a.href = path;\n\n    return new URL(a.href);\n};\n","/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createDynamicWorker = (body) => {\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\"\n        })\n    );\n\n    // ...\n    const worker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    // ...\n    return worker;\n};\n\n/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createFetchWorker = () =>\n    createDynamicWorker(\n        () =>\n            (onmessage = async (event) => {\n                //\n                try {\n                    const response = await fetch(\n                        event.data.href,\n                        event.data.options\n                    );\n                    const blob = await response.blob();\n\n                    event.data.status = response.status;\n                    event.data.statusText = response.statusText;\n                    event.data.blob = blob;\n                } catch (e) {\n                    event.data.statusText = e;\n                }\n\n                // ...\n                postMessage(event.data);\n            })\n    );\n\n/**\n *\n */\nexport default new (class LoaderWorker {\n    constructor() {\n        this._worker = null;\n\n        this._requests = 0;\n    }\n\n    terminate() {\n        //\n        //\n        if (this._requests > 0) {\n            this._requests--;\n        }\n\n        //\n        if (this._requests === 0) {\n            this._worker.terminate();\n\n            this._worker = null;\n        }\n\n        //\n        return this._worker;\n    }\n\n    worker() {\n        // ...\n        this._requests++;\n\n        // ...\n        if (this._worker) {\n            return this._worker;\n        }\n\n        // ...\n        this._worker = createFetchWorker();\n\n        //\n        return this._worker;\n    }\n})();\n","import lworker from \"./loader.worker.mjs\";\n\n/**\n *\n */\nexport default new (class LoaderFetch {\n    constructor() {\n        // ...\n        this.cache = {};\n    }\n\n    /**\n     * Fetches a resource url in the secondary thread and retrieves it as a blob\n     * @private\n     * @param {String} href The resource url to be fetched\n     * @param {Object} options The fetch options object\n     * @returns {Promise} The fetch promise\n     */\n    async fetch(href, options) {\n        // ...\n        options = {\n            ...{\n                cache: true,\n                fetch: {}\n            },\n            ...options\n        };\n\n        // ...\n        if (options.cache === true && href in this.cache) {\n            return await this.cache[href];\n        }\n\n        // ...\n        return (this.cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = lworker.worker();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                lworker.terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(\n                    new Error(`${data.statusText} for ${data.href} resource.`)\n                );\n            });\n        }));\n    }\n})();\n","export default async (blob, options) => {\n    //\n    options = { ...{ element: document }, options };\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const sheet = new CSSStyleSheet();\n\n    //\n    await sheet.replace(`@import url(\"${url}\")`);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    if (\n        typeof options.element === \"object\" &&\n        \"adoptedStyleSheets\" in options.element\n    ) {\n        options.element.adoptedStyleSheets = [\n            ...options.element.adoptedStyleSheets,\n            sheet\n        ];\n    }\n\n    //\n    return sheet;\n};\n","export default async (blob, options) => {\n    //\n    const reader = new FileReader();\n\n    //\n    const promise = new Promise((resolve) =>\n        reader.addEventListener(\"loadend\", (buffer) =>\n            resolve(buffer.srcElement.result)\n        )\n    );\n\n    //\n    reader.readAsText(blob);\n\n    //\n    let result = await promise;\n\n    //\n    if (\n        options &&\n        typeof options.filter === \"string\" &&\n        options.filter.length\n    ) {\n        //\n        result = new DOMParser().parseFromString(result, \"text/html\").body;\n        //\n        result = [...result.querySelectorAll(options.filter)];\n        //\n        result = result.length\n            ? result.map((x) => x.outerHTML).reduce((x, y) => x + y)\n            : result;\n    }\n\n    //\n    if (\n        options &&\n        options.element &&\n        options.element instanceof HTMLElement &&\n        result &&\n        typeof result === \"string\" &&\n        result.length\n    ) {\n        options.element.innerHTML = result;\n    }\n\n    //\n    return promise;\n};\n","export default async (blob, options) => {\n    //\n    const image =\n        options && options.element instanceof HTMLImageElement\n            ? options.element\n            : new Image();\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const promise = new Promise((resolve, reject) => {\n        image.onload = resolve;\n        image.onerror = () =>\n            reject(new Error(`Error loading image ${blob.type}`));\n    });\n\n    //\n    image.src = url;\n\n    //\n    const result = await promise;\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","export default async (blob) => {\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const result = await import(url);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","import css from \"./loader.load.css.mjs\";\nimport html from \"./loader.load.html.mjs\";\nimport image from \"./loader.load.image.mjs\";\nimport javascript from \"./loader.load.javascript.mjs\";\n\n/**\n *\n */\nexport default new (class LoaderLoad {\n    constructor() {\n        // loaders closure, filled with default loaders\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n        this.loaders = {\n            image: image,\n            html: html,\n            css: css,\n            javascript: javascript\n        };\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        this.loaders[type] = loader;\n    }\n\n    /**\n     * Loads a resource, which usually consists in attaching it to an existent DOM element\n     * @private\n     * @param {Blob} blob The resource to be loaded in Blob form\n     * @param {Object} options The resource load options\n     * @returns {Promise} The resource load in promise form\n     */\n    async load(blob, options) {\n        const type = blob.type;\n\n        //...\n        const keys = type.split(\"/\").reduce((x, y) => [type, x, y]);\n\n        // ...\n        for (const key in keys) {\n            const loader = keys[key];\n\n            if (loader in this.loaders) {\n                return await this.loaders[loader](blob, options);\n            }\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid ${blob.type} media type passed to Loader class \"load\" method.`\n        );\n    }\n})();\n","import { getURL } from \"./loader.utils.mjs\";\nimport lfetch from \"./loader.fetch.mjs\";\nimport lload from \"./loader.load.mjs\";\n\nexport default class Loader {\n    constructor() {}\n\n    /**\n     * Fetches one or more resources url\n     * @param {Array.<String>|Array.<URL>|String|URL} resource The resource(s) url to be fetched in a separate thread\n     * @param {Object} options The fetch options object\n     * @returns {Array.<Promise>|Promise} The fetch promise(s)\n     */\n    async fetch(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            return await resource.map((a) => this.fetch(a, options));\n        }\n\n        // ...\n        if (typeof resource === \"string\") {\n            return await this.fetch(getURL(resource), options);\n        }\n\n        // ...\n        if (resource instanceof URL) {\n            return await lfetch.fetch(resource.href, options);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof resource} passed to Loader class \"fetch\" method.`\n        );\n    }\n\n    /**\n     * Loads one or more resources url considering the passed options object and the resource mime type to be loaded\n     * @param {Array.<String>|Array.<URL>|Array.<Blob>|String|URL|Blob} resource The resource(s) to be loaded\n     * @param {Object} options The loader type options\n     * @returns {Array.<Promise>|Promise} The load promise(s)\n     */\n    async load(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            const isArrayOpts = Array.isArray(options);\n\n            return await resource.map((a, i) =>\n                this.load(a, isArrayOpts ? options[i] : options)\n            );\n        }\n\n        // ...\n        const blob =\n            resource instanceof Blob\n                ? resource\n                : await this.fetch(resource, options);\n\n        // ...\n        return await lload.load(blob, options);\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        return lload.register(type, loader);\n    }\n}\n"],"names":["a","document","createElement","createFetchWorker","body","url","URL","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createDynamicWorker","onmessage","async","event","response","fetch","data","href","options","blob","status","statusText","e","postMessage","[object Object]","this","_worker","_requests","terminate","cache","Promise","resolve","reject","lworker","addEventListener","Error","element","sheet","CSSStyleSheet","replace","adoptedStyleSheets","reader","FileReader","promise","buffer","srcElement","result","readAsText","filter","length","DOMParser","parseFromString","querySelectorAll","map","x","outerHTML","reduce","y","HTMLElement","innerHTML","image","HTMLImageElement","Image","onload","onerror","src","import","loaders","html","css","javascript","loader","keys","split","key","TypeError","resource","Array","isArray","path","lfetch","isArrayOpts","i","load","lload","register"],"mappings":"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"}