{"version":3,"sources":["src/loader.worker.mjs","src/loader.fetch.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","this","createFetchWorker","body","url","URL","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createDynamicWorker","onmessage","async","event","response","fetch","data","href","options","blob","status","statusText","e","postMessage","lworker","[object Object]","_worker","_requests","terminate","cache","Promise","resolve","reject","addEventListener","Error"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAC9D,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAO,SAAUH,IAC7DD,EAASA,GAAUM,MAAaC,OAASN,IAH9C,CAIEO,KAAM,WAAe,aAEnB,MAcMC,EAAoB,IAdE,CAACC,IACzB,MAAMC,EAAMC,IAAIC,gBACZ,IAAIC,KAAK,CAAC,IAAKJ,EAAKK,WAAY,OAAQ,CACpCC,KAAM,4BAIRC,EAAS,IAAIC,OAAOP,GAI1B,OAFAC,IAAIO,gBAAgBR,GAEbM,GAIPG,CACI,IACKC,UAAYC,OAAOC,IAChB,IACI,MAAMC,QAAiBC,MACnBF,EAAMG,KAAKC,KACXJ,EAAMG,KAAKE,SAETC,QAAaL,EAASK,OAE5BN,EAAMG,KAAKI,OAASN,EAASM,OAC7BP,EAAMG,KAAKK,WAAaP,EAASO,WACjCR,EAAMG,KAAKG,KAAOA,EACpB,MAAOG,GACLT,EAAMG,KAAKK,WAAaC,EAG5BC,YAAYV,EAAMG,SAIlC,IAAIQ,EAAU,IAAI,MACdC,cACI3B,KAAK4B,QAAU,KAEf5B,KAAK6B,UAAY,EAGrBF,YAWI,OAVI3B,KAAK6B,UAAY,GACjB7B,KAAK6B,YAGc,IAAnB7B,KAAK6B,YACL7B,KAAK4B,QAAQE,YAEb9B,KAAK4B,QAAU,MAGZ5B,KAAK4B,QAGhBD,SAGI,OAFA3B,KAAK6B,YAED7B,KAAK4B,QACE5B,KAAK4B,SAGhB5B,KAAK4B,QAAU3B,IAERD,KAAK4B,WAqDpB,OAjDmB,IAAI,MACnBD,cACI3B,KAAK+B,MAAQ,GAGjBJ,YAAYR,EAAMC,GASd,OAAsB,KARtBA,EAAU,CAEFW,OAAO,EACPd,MAAO,MAERG,IAGKW,OAAkBZ,KAAQnB,KAAK+B,YAC1B/B,KAAK+B,MAAMZ,GAGpBnB,KAAK+B,MAAMZ,GAAQ,IAAIa,QAAQ,CAACC,EAASC,KAC7C,MAAMzB,EAASiB,EAAQjB,SAEvBA,EAAOgB,YAAY,CACfN,KAAMA,EACNC,QAASA,EAAQH,QAGrBR,EAAO0B,iBAAiB,UAAYpB,IAChC,MAAMG,EAAOH,EAAMG,KAEfA,EAAKC,OAASA,IAIlBO,EAAQI,YAEY,MAAhBZ,EAAKI,OAMTY,EACI,IAAIE,SAASlB,EAAKK,kBAAkBL,EAAKC,mBANzCc,EAAQf,EAAKG","sourcesContent":["/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createDynamicWorker = (body) => {\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\",\n        })\n    );\n\n    // ...\n    const worker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    // ...\n    return worker;\n};\n\n/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createFetchWorker = () =>\n    createDynamicWorker(\n        () =>\n            (onmessage = async (event) => {\n                //\n                try {\n                    const response = await fetch(\n                        event.data.href,\n                        event.data.options\n                    );\n                    const blob = await response.blob();\n\n                    event.data.status = response.status;\n                    event.data.statusText = response.statusText;\n                    event.data.blob = blob;\n                } catch (e) {\n                    event.data.statusText = e;\n                }\n\n                // ...\n                postMessage(event.data);\n            })\n    );\n\n/**\n *\n */\nexport default new (class LoaderWorker {\n    constructor() {\n        this._worker = null;\n\n        this._requests = 0;\n    }\n\n    terminate() {\n        //\n        //\n        if (this._requests > 0) {\n            this._requests--;\n        }\n\n        //\n        if (this._requests === 0) {\n            this._worker.terminate();\n\n            this._worker = null;\n        }\n\n        //\n        return this._worker;\n    }\n\n    worker() {\n        // ...\n        this._requests++;\n\n        // ...\n        if (this._worker) {\n            return this._worker;\n        }\n\n        // ...\n        this._worker = createFetchWorker();\n\n        //\n        return this._worker;\n    }\n})();\n","import lworker from \"./loader.worker.mjs\";\n\n/**\n *\n */\nexport default new (class LoaderFetch {\n    constructor() {\n        // ...\n        this.cache = {};\n    }\n\n    /**\n     * Fetches a resource url in the secondary thread and retrieves it as a blob\n     * @private\n     * @param {String} href The resource url to be fetched\n     * @param {Object} options The fetch options object\n     * @returns {Promise} The fetch promise\n     */\n    async fetch(href, options) {\n        // ...\n        options = {\n            ...{\n                cache: true,\n                fetch: {},\n            },\n            ...options,\n        };\n\n        // ...\n        if (options.cache === true && href in this.cache) {\n            return await this.cache[href];\n        }\n\n        // ...\n        return (this.cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = lworker.worker();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch,\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                lworker.terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(\n                    new Error(`${data.statusText} for ${data.href} resource.`)\n                );\n            });\n        }));\n    }\n})();\n"],"file":"loader.fetch.min.js"}