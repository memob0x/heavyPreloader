{"version":3,"file":"loader.es.min.js","sources":["../src/loader.utils.mjs","../src/loader.worker.mjs","../src/loader.fetch.mjs","../src/loader.load.mjs","../src/loader.mjs"],"sourcesContent":["const a = document.createElement(\"a\");\n\n/**\n *\n * @param {String} path\n * @returns {URL}\n */\nexport const getURL = (path) => {\n    a.href = path;\n\n    return new URL(a.href);\n};\n","/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createDynamicWorker = (body) => {\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\"\n        })\n    );\n\n    // ...\n    const worker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    // ...\n    return worker;\n};\n\n/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createFetchWorker = () =>\n    createDynamicWorker(\n        () =>\n            (onmessage = async (event) => {\n                //\n                try {\n                    const response = await fetch(\n                        event.data.href,\n                        event.data.options\n                    );\n                    const blob = await response.blob();\n\n                    event.data.status = response.status;\n                    event.data.statusText = response.statusText;\n                    event.data.blob = blob;\n                } catch (e) {\n                    event.data.statusText = e;\n                }\n\n                // ...\n                postMessage(event.data);\n            })\n    );\n\n/**\n *\n */\nexport default new (class LoaderWorker {\n    constructor() {\n        this._worker = null;\n\n        this._requests = 0;\n    }\n\n    terminate() {\n        //\n        //\n        if (this._requests > 0) {\n            this._requests--;\n        }\n\n        //\n        if (this._requests === 0) {\n            this._worker.terminate();\n\n            this._worker = null;\n        }\n\n        //\n        return this._worker;\n    }\n\n    worker() {\n        // ...\n        this._requests++;\n\n        // ...\n        if (this._worker) {\n            return this._worker;\n        }\n\n        // ...\n        this._worker = createFetchWorker();\n\n        //\n        return this._worker;\n    }\n})();\n","import lworker from \"./loader.worker.mjs\";\n\n/**\n *\n */\nexport default new (class LoaderFetch {\n    constructor() {\n        // ...\n        this.cache = {};\n    }\n\n    /**\n     * Fetches a resource url in the secondary thread and retrieves it as a blob\n     * @private\n     * @param {String} href The resource url to be fetched\n     * @param {Object} options The fetch options object\n     * @returns {Promise} The fetch promise\n     */\n    async fetch(href, options) {\n        // ...\n        options = {\n            ...{\n                cache: true,\n                fetch: {}\n            },\n            ...options\n        };\n\n        // ...\n        if (options.cache === true && href in this.cache) {\n            return await this.cache[href];\n        }\n\n        // ...\n        return (this.cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = lworker.worker();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                lworker.terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(\n                    new Error(`${data.statusText} for ${data.href} resource.`)\n                );\n            });\n        }));\n    }\n})();\n","/**\n *\n */\nexport default new (class LoaderLoad {\n    constructor() {\n        // loaders closure, filled with default loaders\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n        this.loaders = {};\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        this.loaders[type] = loader;\n    }\n\n    /**\n     * Loads a resource, which usually consists in attaching it to an existent DOM element\n     * @private\n     * @param {Blob} blob The resource to be loaded in Blob form\n     * @param {Object} options The resource load options\n     * @returns {Promise} The resource load in promise form\n     */\n    async load(blob, options) {\n        const type = blob.type;\n\n        //...\n        const keys = type.split(\"/\").reduce((x, y) => [type, x, y]);\n\n        // ...\n        for (const key in keys) {\n            const loader = keys[key];\n\n            if (loader in this.loaders) {\n                return await this.loaders[loader](blob, options);\n            }\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid ${blob.type} media type passed to Loader class \"load\" method.`\n        );\n    }\n})();\n","import { getURL } from \"./loader.utils.mjs\";\nimport lfetch from \"./loader.fetch.mjs\";\nimport lload from \"./loader.load.mjs\";\n\nexport default class Loader {\n    constructor() {}\n\n    /**\n     * Fetches one or more resources url\n     * @param {Array.<String>|Array.<URL>|String|URL} resource The resource(s) url to be fetched in a separate thread\n     * @param {Object} options The fetch options object\n     * @returns {Array.<Promise>|Promise} The fetch promise(s)\n     */\n    async fetch(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            return await resource.map((a) => this.fetch(a, options));\n        }\n\n        // ...\n        if (typeof resource === \"string\") {\n            return await this.fetch(getURL(resource), options);\n        }\n\n        // ...\n        if (resource instanceof URL) {\n            return await lfetch.fetch(resource.href, options);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof resource} passed to Loader class \"fetch\" method.`\n        );\n    }\n\n    /**\n     * Loads one or more resources url considering the passed options object and the resource mime type to be loaded\n     * @param {Array.<String>|Array.<URL>|Array.<Blob>|String|URL|Blob} resource The resource(s) to be loaded\n     * @param {Object} options The loader type options\n     * @returns {Array.<Promise>|Promise} The load promise(s)\n     */\n    async load(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            const isArrayOpts = Array.isArray(options);\n\n            return await resource.map((a, i) =>\n                this.load(a, isArrayOpts ? options[i] : options)\n            );\n        }\n\n        // ...\n        const blob =\n            resource instanceof Blob\n                ? resource\n                : await this.fetch(resource, options);\n\n        // ...\n        return await lload.load(blob, options);\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        return lload.register(type, loader);\n    }\n}\n"],"names":["a","document","createElement","createFetchWorker","body","url","URL","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createDynamicWorker","onmessage","async","event","response","fetch","data","href","options","blob","status","statusText","e","postMessage","[object Object]","this","_worker","_requests","terminate","cache","Promise","resolve","reject","lworker","addEventListener","Error","loaders","loader","keys","split","reduce","x","y","key","TypeError","resource","Array","isArray","map","path","lfetch","isArrayOpts","i","load","lload","register"],"mappings":"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"}