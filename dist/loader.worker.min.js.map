{"version":3,"sources":["src/loader.worker.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","this","createFetchWorker","body","url","URL","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createDynamicWorker","onmessage","async","event","response","fetch","data","href","options","blob","status","statusText","e","postMessage","[object Object]","_worker","_requests","terminate"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBA,OAAOD,QAAUD,IAC9D,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAO,SAAUH,IAC7DD,EAASA,GAAUM,MAAaC,OAASN,IAH9C,CAIEO,KAAM,WAAe,aAEnB,MAcMC,EAAoB,IAdE,CAACC,IACzB,MAAMC,EAAMC,IAAIC,gBACZ,IAAIC,KAAK,CAAC,IAAKJ,EAAKK,WAAY,OAAQ,CACpCC,KAAM,4BAIRC,EAAS,IAAIC,OAAOP,GAI1B,OAFAC,IAAIO,gBAAgBR,GAEbM,GAIPG,CACI,IACKC,UAAYC,OAAOC,IAChB,IACI,MAAMC,QAAiBC,MACnBF,EAAMG,KAAKC,KACXJ,EAAMG,KAAKE,SAETC,QAAaL,EAASK,OAE5BN,EAAMG,KAAKI,OAASN,EAASM,OAC7BP,EAAMG,KAAKK,WAAaP,EAASO,WACjCR,EAAMG,KAAKG,KAAOA,EACpB,MAAOG,GACLT,EAAMG,KAAKK,WAAaC,EAG5BC,YAAYV,EAAMG,SAsClC,OAlCoB,IAAI,MACpBQ,cACI1B,KAAK2B,QAAU,KAEf3B,KAAK4B,UAAY,EAGrBF,YAWI,OAVI1B,KAAK4B,UAAY,GACjB5B,KAAK4B,YAGc,IAAnB5B,KAAK4B,YACL5B,KAAK2B,QAAQE,YAEb7B,KAAK2B,QAAU,MAGZ3B,KAAK2B,QAGhBD,SAGI,OAFA1B,KAAK4B,YAED5B,KAAK2B,QACE3B,KAAK2B,SAGhB3B,KAAK2B,QAAU1B,IAERD,KAAK2B","sourcesContent":["/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createDynamicWorker = (body) => {\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\",\n        })\n    );\n\n    // ...\n    const worker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    // ...\n    return worker;\n};\n\n/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createFetchWorker = () =>\n    createDynamicWorker(\n        () =>\n            (onmessage = async (event) => {\n                //\n                try {\n                    const response = await fetch(\n                        event.data.href,\n                        event.data.options\n                    );\n                    const blob = await response.blob();\n\n                    event.data.status = response.status;\n                    event.data.statusText = response.statusText;\n                    event.data.blob = blob;\n                } catch (e) {\n                    event.data.statusText = e;\n                }\n\n                // ...\n                postMessage(event.data);\n            })\n    );\n\n/**\n *\n */\nexport default new (class LoaderWorker {\n    constructor() {\n        this._worker = null;\n\n        this._requests = 0;\n    }\n\n    terminate() {\n        //\n        //\n        if (this._requests > 0) {\n            this._requests--;\n        }\n\n        //\n        if (this._requests === 0) {\n            this._worker.terminate();\n\n            this._worker = null;\n        }\n\n        //\n        return this._worker;\n    }\n\n    worker() {\n        // ...\n        this._requests++;\n\n        // ...\n        if (this._worker) {\n            return this._worker;\n        }\n\n        // ...\n        this._worker = createFetchWorker();\n\n        //\n        return this._worker;\n    }\n})();\n"],"file":"loader.worker.min.js"}