!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Loader",t):(e=e||self).Loader=t()}(this,function(){"use strict";const e=document.createElement("a"),t=t=>(e.href=t,new URL(e.href)),r=()=>(e=>{const t=URL.createObjectURL(new Blob(["(",e.toString(),")()"],{type:"application/javascript"})),r=new Worker(t);return URL.revokeObjectURL(t),r})(()=>onmessage=(async e=>{try{const t=await fetch(e.data.href,e.data.options),r=await t.blob();e.data.status=t.status,e.data.statusText=t.statusText,e.data.blob=r}catch(t){e.data.statusText=t}postMessage(e.data)}));var a=new class{constructor(){this._worker=null,this._requests=0}terminate(){return this._requests>0&&this._requests--,0===this._requests&&(this._worker.terminate(),this._worker=null),this._worker}worker(){return this._requests++,this._worker?this._worker:(this._worker=r(),this._worker)}};const s={};var n=async(e,t)=>!0===(t={cache:!0,fetch:{},...t}).cache&&e in s?await s[e]:s[e]=new Promise((r,s)=>{const n=a.worker();n.postMessage({href:e,options:t.fetch}),n.addEventListener("message",t=>{const n=t.data;n.href===e&&(a.terminate(),200!==n.status?s(new Error(`${n.statusText} for ${n.href} resource.`)):r(n.blob))})}),o=async(e,t)=>{switch(e.type){case"image/png":case"image/jpeg":return await(async(e,t)=>{const r=t.element instanceof HTMLImageElement?t.element:new Image,a=URL.createObjectURL(e),s=new Promise((e,t)=>{r.onload=e,r.onerror=t});r.src=a;const n=await s;return URL.revokeObjectURL(a),n})(e,t);case"text/html":return await(async(e,t)=>{const r=new FileReader,a=new Promise(e=>r.addEventListener("loadend",t=>e(t.srcElement.result)));r.readAsText(e);let s=await a;return t&&"string"==typeof t.filter&&t.filter.length&&(s=(s=[...(s=(new DOMParser).parseFromString(s,"text/html").body).querySelectorAll(t.filter)]).length?s.map(e=>e.outerHTML).reduce((e,t)=>e+t):s),t&&t.element&&t.element instanceof HTMLElement&&s&&"string"==typeof s&&s.length&&(t.element.innerHTML=s),a})(e,t);case"text/css":return await(async(e,t)=>{t={element:document,options:t};const r=URL.createObjectURL(e),a=new CSSStyleSheet;return await a.replace(`@import url("${r}")`),URL.revokeObjectURL(r),"object"==typeof t.element&&"adoptedStyleSheets"in t.element&&(t.element.adoptedStyleSheets=[...t.element.adoptedStyleSheets,a]),a})(e,t);case"text/javascript":return await(async e=>{const t=URL.createObjectURL(e),r=await import(t);return URL.revokeObjectURL(t),r})(e)}throw new TypeError(`Invalid argment of type ${typeof e} passed to Loader class "fetch" method.`)};return class{constructor(){}async fetch(e,r){if(Array.isArray(e))return await e.map(e=>this.fetch(e,r));if("string"==typeof e)return await this.fetch(t(e),r);if(e instanceof URL)return await n(e.href,r);throw new TypeError(`Invalid argment of type ${typeof e} passed to Loader class "fetch" method.`)}async load(e,t){if(Array.isArray(e)){const r=Array.isArray(t);return await e.map((e,a)=>this.load(e,r?t[a]:t))}const r=e instanceof Blob?e:await this.fetch(e,t);return await o(r,t)}}});
//# sourceMappingURL=loader.min.js.map
