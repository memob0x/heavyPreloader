!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Loader",t):(e=e||self).Loader=t()}(this,function(){"use strict";const e=e=>new URL((t=>(t.href=e,t))(document.createElement("a"))),t=()=>{onmessage=(async e=>{const t=e.data;let r;try{const e=await fetch(t.href,t.options),a=await e.blob();r={status:e.status,statusText:e.statusText,blob:a}}catch(e){r={status:0,statusText:e}}r.href=t.href,postMessage(r)})};let r=null;const a=()=>r||(r=(e=>{if("function"!=typeof e)throw new TypeError(`Invalid argment of type ${typeof e} passed to Loader class internal "createWorker" function.`);const t=URL.createObjectURL(new Blob(["(",e.toString(),")()"],{type:"application/javascript"})),r=new Worker(t);return URL.revokeObjectURL(t),r})(t)),s={};var o=async(e,t={})=>e in s?await s[e]:s[e]=new Promise((r,s)=>{const o=a();o.postMessage({href:e,options:t.fetch}),o.addEventListener("message",t=>{const a=t.data;a.href===e&&(200!==a.status?s(new Error(`${a.statusText} for ${a.href} resource.`)):r(a.blob))})});return class{constructor(e){this.options={fetch:{cors:"no-cors"},...e}}async fetch(t){if(Array.isArray(t))return await t.map(e=>this.fetch(e));if("string"==typeof t)return await this.fetch(e(t));if(t instanceof URL)return await o(t.href,this.options);throw new TypeError(`Invalid argment of type ${typeof t} passed to Loader class "fetch" method.`)}async load(e,t){if(Array.isArray(e))return await e.map(e=>this.load(e));const r=await this.fetch(e);switch(r.type){case"image/png":case"image/jpeg":t=void 0===t?new Image:t;const e=URL.createObjectURL(r);return await new Promise((r,a)=>{t.onload=r,t.onerror=a,t.src=e}),URL.revokeObjectURL(e),t;case"text/html":return new Promise((e,t)=>{const a=new FileReader;a.addEventListener("loadend",t=>e(t.srcElement.result)),a.readAsText(r)});case"text/css":t=void 0===t?document:t;const a=URL.createObjectURL(r),s=new CSSStyleSheet;return await s.replace(`@import url("${a}")`),URL.revokeObjectURL(a),"adoptedStyleSheets"in t&&(t.adoptedStyleSheets=[...t.adoptedStyleSheets,s]),s;case"text/javascript":const o=URL.createObjectURL(r),n=await import(o);return URL.revokeObjectURL(o),n}throw new TypeError(`Invalid argment of type ${typeof e} passed to Loader class "fetch" method.`)}}});
//# sourceMappingURL=loader.min.js.map
