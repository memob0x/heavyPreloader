!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define("Loader",e):(t=t||self).Loader=e()}(this,function(){"use strict";const t=t=>new URL((e=>(e.href=t,e))(document.createElement("a"))),e=()=>{onmessage=(async t=>{const e=t.data;let s;try{const t=await fetch(e.href,e.options),o=await t.blob();s={status:t.status,statusText:t.statusText,blob:o}}catch(t){s={status:0,statusText:t}}s.href=e.href,postMessage(s)})};let s=null;const o=()=>s||(s=(t=>{if("function"!=typeof t)throw new TypeError(`Invalid argment of type ${typeof t} passed to Loader class internal "createWorker" function.`);const e=URL.createObjectURL(new Blob(["(",t.toString(),")()"],{type:"application/javascript"})),s=new Worker(e);return URL.revokeObjectURL(e),s})(e)),r={};var n=async(t,e={})=>t in r?await r[t]:r[t]=new Promise((s,r)=>{const n=o();n.postMessage({href:t,options:e.fetch}),n.addEventListener("message",e=>{const o=e.data;o.href===t&&(200!==o.status?r(new Error(`${o.statusText} for ${o.href} resource.`)):s(o.blob))})});return class{constructor(t){this.options={fetch:{cors:"no-cors"},...t}}fetch(e){return Array.isArray(e)?e.map(t=>this.fetch(t)):"string"==typeof e?this.fetch(t(e)):e instanceof URL?n(e.href,this.options):Promise.reject(new TypeError(`Invalid argment of type ${typeof e} passed to Loader class "fetch" method.`))}}});
//# sourceMappingURL=loader.min.js.map
