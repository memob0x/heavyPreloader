!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Loader",t):(e=e||self).Loader=t()}(this,function(){"use strict";const e=()=>onmessage=(async e=>{try{const t=await fetch(e.data.href,e.data.options),a=await t.blob();e.data.status=t.status,e.data.statusText=t.statusText,e.data.blob=a}catch(t){e.data.statusText=t}postMessage(e.data)});let t=null,a=0;const r={};var s=async(s,n={})=>s in r?await r[s]:r[s]=new Promise((r,o)=>{const c=(()=>{if(a++,t)return t;const r=URL.createObjectURL(new Blob(["(",e.toString(),")()"],{type:"application/javascript"}));return t=new Worker(r),URL.revokeObjectURL(r),t})();c.postMessage({href:s,options:n.fetch}),c.addEventListener("message",e=>{const n=e.data;n.href===s&&(--a<=0&&(t.terminate(),t=null),200!==n.status?o(new Error(`${n.statusText} for ${n.href} resource.`)):r(n.blob))})}),n=async(e,t)=>{switch(e.type){case"image/png":case"image/jpeg":return await(async(e,t=new Image)=>{const a=URL.createObjectURL(e),r=new Promise((e,a)=>{t.onload=e,t.onerror=a});t.src=a;const s=await r;return URL.revokeObjectURL(a),s})(e,t);case"text/html":return await(async(e,t)=>{const a=new FileReader,r=new Promise(e=>a.addEventListener("loadend",t=>e(t.srcElement.result)));a.readAsText(e);const s=await r;return t&&"object"==typeof t&&"innerHTML"in t&&(t.innerHTML=s),r})(e,t);case"text/css":return await(async(e,t=document)=>{const a=URL.createObjectURL(e),r=new CSSStyleSheet;return await r.replace(`@import url("${a}")`),URL.revokeObjectURL(a),"adoptedStyleSheets"in t&&(t.adoptedStyleSheets=[...t.adoptedStyleSheets,r]),r})(e,t);case"text/javascript":return await(async e=>{const t=URL.createObjectURL(e),a=await import(t);return URL.revokeObjectURL(t),a})(e)}throw new TypeError(`Invalid argment of type ${typeof e} passed to Loader class "fetch" method.`)};return class{constructor(e){this.options={fetch:{cors:"no-cors"},...e}}async fetch(e){if(Array.isArray(e))return await e.map(e=>this.fetch(e));if("string"==typeof e){const t=document.createElement("a");return t.href=e,await this.fetch(new URL(t))}if(e instanceof URL)return await s(e.href,this.options);throw new TypeError(`Invalid argment of type ${typeof e} passed to Loader class "fetch" method.`)}async load(e,t){if(Array.isArray(e))return await e.map(e=>this.load(e,t));const a=await this.fetch(e);return await n(a,t)}}});
//# sourceMappingURL=loader.min.js.map
