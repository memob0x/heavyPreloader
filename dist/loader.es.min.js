const e=document.createElement("a"),t=()=>(e=>{const t=URL.createObjectURL(new Blob(["(",e.toString(),")()"],{type:"application/javascript"})),r=new Worker(t);return URL.revokeObjectURL(t),r})(()=>onmessage=async e=>{try{const t=await fetch(e.data.href,e.data.options),r=await t.blob();e.data.status=t.status,e.data.statusText=t.statusText,e.data.blob=r}catch(t){e.data.statusText=t}postMessage(e.data)});var r=new class{constructor(){this._worker=null,this._requests=0}terminate(){return this._requests>0&&this._requests--,0===this._requests&&(this._worker.terminate(),this._worker=null),this._worker}worker(){return this._requests++,this._worker||(this._worker=t()),this._worker}},a=new class{constructor(){this.cache={}}async fetch(e,t){return!0===(t={cache:!0,fetch:{},...t}).cache&&e in this.cache?await this.cache[e]:this.cache[e]=new Promise((a,s)=>{const n=r.worker();n.postMessage({href:e,options:t.fetch}),n.addEventListener("message",t=>{const n=t.data;n.href===e&&(r.terminate(),200!==n.status?s(new Error(`${n.statusText} for ${n.href} resource.`)):a(n.blob))})})}},s=async(e,t)=>{t={element:document,options:t};const r=URL.createObjectURL(e),a=new CSSStyleSheet;return await a.replace(`@import url("${r}")`),URL.revokeObjectURL(r),"object"==typeof t.element&&"adoptedStyleSheets"in t.element&&(t.element.adoptedStyleSheets=[...t.element.adoptedStyleSheets,a]),a},n=async(e,t)=>{const r=new FileReader,a=new Promise(e=>r.addEventListener("loadend",t=>e(t.srcElement.result)));r.readAsText(e);let s=await a;return t&&"string"==typeof t.filter&&t.filter.length&&(s=(new DOMParser).parseFromString(s,"text/html").body,s=[...s.querySelectorAll(t.filter)],s=s.length?s.map(e=>e.outerHTML).reduce((e,t)=>e+t):s),t&&t.element&&t.element instanceof HTMLElement&&s&&"string"==typeof s&&s.length&&(t.element.innerHTML=s),a},o=async(e,t)=>{const r=t&&t.element instanceof HTMLImageElement?t.element:new Image,a=URL.createObjectURL(e),s=new Promise((t,a)=>{r.onload=t,r.onerror=()=>a(new Error("Error loading image "+e.type))});r.src=a;const n=await s;return URL.revokeObjectURL(a),n},c=async e=>{const t=URL.createObjectURL(e),r=await import(t);return URL.revokeObjectURL(t),r},i=new class{constructor(){this.loaders={image:o,html:n,css:s,javascript:c}}register(e,t){this.loaders[e]=t}async load(e,t){const r=e.type,a=r.split("/").reduce((e,t)=>[r,e,t]);for(const r in a){const s=a[r];if(s in this.loaders)return await this.loaders[s](e,t)}throw new TypeError(`Invalid ${e.type} media type passed to Loader class "load" method.`)}};export default class{constructor(){}async fetch(t,r){if(Array.isArray(t))return await t.map(e=>this.fetch(e,r));if("string"==typeof t)return await this.fetch((s=t,e.href=s,new URL(e.href)),r);var s;if(t instanceof URL)return await a.fetch(t.href,r);throw new TypeError(`Invalid argment of type ${typeof t} passed to Loader class "fetch" method.`)}async load(e,t){if(Array.isArray(e)){const r=Array.isArray(t);return await e.map((e,a)=>this.load(e,r?t[a]:t))}const r=e instanceof Blob?e:await this.fetch(e,t);return await i.load(r,t)}register(e,t){return i.register(e,t)}}
//# sourceMappingURL=loader.es.min.js.map
