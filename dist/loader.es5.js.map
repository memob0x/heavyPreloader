{"version":3,"sources":["loader.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","body","onmessage","event","fetch","data","href","options","response","blob","status","statusText","postMessage","lworker","requests","get","url","URL","createObjectURL","Blob","toString","type","Worker","revokeObjectURL","terminate","cache","lfetch","Promise","resolve","reject","worker","addEventListener","Error","css","el","document","sheet","CSSStyleSheet","replace","adoptedStyleSheets","html","reader","FileReader","promise","buffer","srcElement","result","readAsText","innerHTML","image","Image","onload","onerror","src","javascript","lload","TypeError","cors","arg","Array","isArray","map","a","createElement","load"],"mappings":"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","file":"loader.es5.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('Loader', factory) :\n    (global = global || self, global.Loader = factory());\n}(this, (function () { 'use strict';\n\n    /**\n     *\n     * @private\n     * @static\n     */\n    const body = () =>\n        (onmessage = async (event) => {\n            //\n            try {\n                const response = await fetch(event.data.href, event.data.options);\n                const blob = await response.blob();\n\n                event.data.status = response.status;\n                event.data.statusText = response.statusText;\n                event.data.blob = blob;\n            } catch (e) {\n                event.data.statusText = e;\n            }\n\n            // ...\n            postMessage(event.data);\n        });\n\n    // ...\n    let lworker = null;\n    let requests = 0;\n\n    /**\n     *\n     * @private\n     */\n    const get = () => {\n        // ...\n        requests++;\n\n        // ...\n        if (lworker) {\n            return lworker;\n        }\n\n        // ...\n        const url = URL.createObjectURL(\n            new Blob([\"(\", body.toString(), \")()\"], {\n                type: \"application/javascript\",\n            })\n        );\n\n        // ...\n        lworker = new Worker(url);\n\n        // ...\n        URL.revokeObjectURL(url);\n\n        //\n        return lworker;\n    };\n\n    /**\n     *\n     * @private\n     */\n    const terminate = () => {\n        //\n        requests--;\n\n        //\n        if (requests <= 0) {\n            lworker.terminate();\n\n            lworker = null;\n        }\n    };\n\n    // ...\n    const cache = {};\n\n    /**\n     *\n     * @private\n     * @param {String} href\n     * @param {Object} options\n     */\n    var lfetch = async (href, options = {}) => {\n        // ...\n        if (href in cache) {\n            return await cache[href];\n        }\n\n        // ...\n        return (cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = get();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch,\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(new Error(`${data.statusText} for ${data.href} resource.`));\n            });\n        }));\n    };\n\n    var css = async (blob, el = document) => {\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const sheet = new CSSStyleSheet();\n\n        //\n        await sheet.replace(`@import url(\"${url}\")`);\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        if (\"adoptedStyleSheets\" in el) {\n            el.adoptedStyleSheets = [...el.adoptedStyleSheets, sheet];\n        }\n\n        //\n        return sheet;\n    };\n\n    var html = async (blob, el) => {\n        //\n        const reader = new FileReader();\n\n        //\n        const promise = new Promise((resolve) =>\n            reader.addEventListener(\"loadend\", (buffer) =>\n                resolve(buffer.srcElement.result)\n            )\n        );\n\n        //\n        reader.readAsText(blob);\n\n        //\n        const result = await promise;\n\n        //\n        if (el && typeof el === \"object\" && \"innerHTML\" in el) {\n            el.innerHTML = result;\n        }\n\n        //\n        return promise;\n    };\n\n    var image = async (blob, el = new Image()) => {\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const promise = new Promise((resolve, reject) => {\n            el.onload = resolve;\n            el.onerror = reject;\n        });\n\n        //\n        el.src = url;\n\n        //\n        const result = await promise;\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        return result;\n    };\n\n    var javascript = async (blob) => {\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const result = await import(url);\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        return result;\n    };\n\n    /**\n     *\n     * @param {Blob} blob\n     * @param {HTMLElement} el\n     */\n    var lload = async (blob, el) => {\n        //...\n        switch (blob.type) {\n            //...\n            case \"image/png\":\n            case \"image/jpeg\":\n                return await image(blob, el);\n\n            //...\n            case \"text/html\":\n                return await html(blob, el);\n\n            //...\n            case \"text/css\":\n                return await css(blob, el);\n\n            //...\n            case \"text/javascript\":\n                return await javascript(blob);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof blob} passed to Loader class \"fetch\" method.`\n        );\n    };\n\n    class Loader {\n        /**\n         *\n         * @param {Object} options\n         */\n        constructor(options) {\n            this.options = {\n                ...{ fetch: { cors: \"no-cors\" } },\n                ...options,\n            };\n        }\n\n        /**\n         *\n         * @param {Array.<String>|Array.<URL>|String|URL} arg\n         * @returns {Array.<Promise>|Promise}\n         */\n        async fetch(arg) {\n            // ...\n            if (Array.isArray(arg)) {\n                return await arg.map((a) => this.fetch(a));\n            }\n\n            // ...\n            if (typeof arg === \"string\") {\n                const a = document.createElement(\"a\");\n\n                a.href = arg;\n\n                return await this.fetch(new URL(a));\n            }\n\n            // ...\n            if (arg instanceof URL) {\n                return await lfetch(arg.href, this.options);\n            }\n\n            // ...\n            throw new TypeError(\n                `Invalid argment of type ${typeof arg} passed to Loader class \"fetch\" method.`\n            );\n        }\n\n        /**\n         *\n         * @param {Array.<String>|Array.<URL>|String|URL} arg\n         * @returns {Array.<Promise>|Promise}\n         */\n        async load(arg, el) {\n            // ...\n            if (Array.isArray(arg)) {\n                return await arg.map((a) => this.load(a, el));\n            }\n\n            // ...\n            const blob = await this.fetch(arg);\n\n            // ...\n            return await lload(blob, el);\n        }\n    }\n\n    return Loader;\n\n})));\n"]}