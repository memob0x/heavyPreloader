{"version":3,"sources":["loader.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","a","document","createElement","getURL","path","href","URL","createDynamicWorker","body","url","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createFetchWorker","onmessage","event","fetch","data","options","response","blob","status","statusText","postMessage","lworker","_worker","_requests","terminate","cache","lfetch","Promise","resolve","reject","addEventListener","Error","css","element","sheet","CSSStyleSheet","replace","adoptedStyleSheets","html","reader","FileReader","promise","buffer","srcElement","result","readAsText","filter","length","DOMParser","parseFromString","querySelectorAll","map","x","outerHTML","reduce","y","HTMLElement","innerHTML","image","HTMLImageElement","Image","onload","onerror","src","javascript","lload","TypeError","resource","Array","isArray","isArrayOpts","i","load"],"mappings":"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","file":"loader.es5.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('Loader', factory) :\n    (global = global || self, global.Loader = factory());\n}(this, (function () { 'use strict';\n\n    const a = document.createElement(\"a\");\n\n    /**\n     *\n     * @param {String} path\n     * @returns {URL}\n     */\n    const getURL = (path) => {\n        a.href = path;\n\n        return new URL(a.href);\n    };\n\n    /**\n     *\n     * @private\n     * @static\n     * TODO: provide unit test\n     */\n    const createDynamicWorker = (body) => {\n        // ...\n        const url = URL.createObjectURL(\n            new Blob([\"(\", body.toString(), \")()\"], {\n                type: \"application/javascript\",\n            })\n        );\n\n        // ...\n        const worker = new Worker(url);\n\n        // ...\n        URL.revokeObjectURL(url);\n\n        // ...\n        return worker;\n    };\n\n    /**\n     *\n     * @private\n     * @static\n     * TODO: provide unit test\n     */\n    const createFetchWorker = () =>\n        createDynamicWorker(\n            () =>\n                (onmessage = async (event) => {\n                    //\n                    try {\n                        const response = await fetch(\n                            event.data.href,\n                            event.data.options\n                        );\n                        const blob = await response.blob();\n\n                        event.data.status = response.status;\n                        event.data.statusText = response.statusText;\n                        event.data.blob = blob;\n                    } catch (e) {\n                        event.data.statusText = e;\n                    }\n\n                    // ...\n                    postMessage(event.data);\n                })\n        );\n\n    /**\n     *\n     */\n    var lworker = new (class LoaderWorker {\n        constructor() {\n            this._worker = null;\n\n            this._requests = 0;\n        }\n\n        terminate() {\n            //\n            //\n            if (this._requests > 0) {\n                this._requests--;\n            }\n\n            //\n            if (this._requests === 0) {\n                this._worker.terminate();\n\n                this._worker = null;\n            }\n\n            //\n            return this._worker;\n        }\n\n        worker() {\n            // ...\n            this._requests++;\n\n            // ...\n            if (this._worker) {\n                return this._worker;\n            }\n\n            // ...\n            this._worker = createFetchWorker();\n\n            //\n            return this._worker;\n        }\n    })();\n\n    // ...\n    const cache = {};\n\n    /**\n     * Fetches a resource url in the secondary thread and retrieves it as a blob\n     * @private\n     * @param {String} href The resource url to be fetched\n     * @param {Object} options The fetch options object\n     * @returns {Promise} The fetch promise\n     */\n    var lfetch = async (href, options) => {\n        // ...\n        options = {\n            ...{\n                cache: true,\n                fetch: {},\n            },\n            ...options,\n        };\n\n        // ...\n        if (options.cache === true && href in cache) {\n            return await cache[href];\n        }\n\n        // ...\n        return (cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = lworker.worker();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch,\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                lworker.terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(new Error(`${data.statusText} for ${data.href} resource.`));\n            });\n        }));\n    };\n\n    var css = async (blob, options) => {\n        //\n        options = { ...{ element: document }, options };\n\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const sheet = new CSSStyleSheet();\n\n        //\n        await sheet.replace(`@import url(\"${url}\")`);\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        if (\n            typeof options.element === \"object\" &&\n            \"adoptedStyleSheets\" in options.element\n        ) {\n            options.element.adoptedStyleSheets = [\n                ...options.element.adoptedStyleSheets,\n                sheet,\n            ];\n        }\n\n        //\n        return sheet;\n    };\n\n    var html = async (blob, options) => {\n        //\n        const reader = new FileReader();\n\n        //\n        const promise = new Promise((resolve) =>\n            reader.addEventListener(\"loadend\", (buffer) =>\n                resolve(buffer.srcElement.result)\n            )\n        );\n\n        //\n        reader.readAsText(blob);\n\n        //\n        let result = await promise;\n\n        //\n        if (\n            options &&\n            typeof options.filter === \"string\" &&\n            options.filter.length\n        ) {\n            //\n            result = new DOMParser().parseFromString(result, \"text/html\").body;\n            //\n            result = [...result.querySelectorAll(options.filter)];\n            //\n            result = result.length\n                ? result.map((x) => x.outerHTML).reduce((x, y) => x + y)\n                : result;\n        }\n\n        //\n        if (\n            options &&\n            options.element &&\n            options.element instanceof HTMLElement &&\n            result &&\n            typeof result === \"string\" &&\n            result.length\n        ) {\n            options.element.innerHTML = result;\n        }\n\n        //\n        return promise;\n    };\n\n    var image = async (blob, options) => {\n        //\n        const image =\n            options && options.element instanceof HTMLImageElement\n                ? options.element\n                : new Image();\n\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const promise = new Promise((resolve, reject) => {\n            image.onload = resolve;\n            image.onerror = () =>\n                reject(new Error(`Error loading image ${blob.type}`));\n        });\n\n        //\n        image.src = url;\n\n        //\n        const result = await promise;\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        return result;\n    };\n\n    var javascript = async (blob) => {\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const result = await import(url);\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        return result;\n    };\n\n    /**\n     * Loads a resource, which usually consists in attaching it to an existent DOM element\n     * @private\n     * @param {Blob} blob The resource to be loaded in Blob form\n     * @param {Object} options The resource load options\n     * @returns {Promise} The resource load in promise form\n     */\n    var lload = async (blob, options) => {\n        //...\n        // TODO: get all major mimetypes\n        switch (blob.type) {\n            //...\n            case \"image/png\":\n            case \"image/jpeg\":\n            case \"image/gif\":\n                return await image(blob, options);\n\n            //...\n            case \"text/html\":\n                return await html(blob, options);\n\n            //...\n            case \"text/css\":\n                return await css(blob, options);\n\n            //...\n            case \"text/javascript\":\n            case \"application/javascript\":\n                return await javascript(blob);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid ${blob.type} media type passed to Loader class \"load\" method.`\n        );\n    };\n\n    class Loader {\n        constructor() {}\n\n        /**\n         * Fetches one or more resources url\n         * @param {Array.<String>|Array.<URL>|String|URL} resource The resource(s) url to be fetched in a separate thread\n         * @param {Object} options The fetch options object\n         * @returns {Array.<Promise>|Promise} The fetch promise(s)\n         */\n        async fetch(resource, options) {\n            // ...\n            if (Array.isArray(resource)) {\n                return await resource.map((a) => this.fetch(a, options));\n            }\n\n            // ...\n            if (typeof resource === \"string\") {\n                return await this.fetch(getURL(resource), options);\n            }\n\n            // ...\n            if (resource instanceof URL) {\n                return await lfetch(resource.href, options);\n            }\n\n            // ...\n            throw new TypeError(\n                `Invalid argment of type ${typeof resource} passed to Loader class \"fetch\" method.`\n            );\n        }\n\n        /**\n         * Loads one or more resources url considering the passed options object and the resource mime type to be loaded\n         * @param {Array.<String>|Array.<URL>|Array.<Blob>|String|URL|Blob} resource The resource(s) to be loaded\n         * @param {Object} options The loader type options\n         * @returns {Array.<Promise>|Promise} The load promise(s)\n         */\n        async load(resource, options) {\n            // ...\n            if (Array.isArray(resource)) {\n                const isArrayOpts = Array.isArray(options);\n\n                return await resource.map((a, i) =>\n                    this.load(a, isArrayOpts ? options[i] : options)\n                );\n            }\n\n            // ...\n            const blob =\n                resource instanceof Blob\n                    ? resource\n                    : await this.fetch(resource, options);\n\n            // ...\n            return await lload(blob, options);\n        }\n    }\n\n    return Loader;\n\n})));\n"]}