{"version":3,"sources":["loader.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","getURL","href","URL","a","document","createElement","createWorker","work","TypeError","url","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","onmessage","event","data","fetch","options","response","blob","message","status","statusText","postMessage","getOrCreateWorker","cache","fetch$1","Promise","resolve","reject","addEventListener","Error","cors","arg","Array","isArray","map"],"mappings":"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","file":"loader.es5.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('Loader', factory) :\n    (global = global || self, global.Loader = factory());\n}(this, (function () { 'use strict';\n\n    /**\n     *\n     * @private\n     * @static\n     * @param {String} href\n     * @returns {URL}\n     */\n    const getURL = (href) =>\n        new URL(\n            ((a) => {\n                a.href = href;\n\n                return a;\n            })(document.createElement(\"a\"))\n        );\n\n    /**\n     *\n     * @private\n     * @static\n     * @param {Function} work\n     * @returns {Worker}\n     */\n    const createWorker = (work) => {\n        if (typeof work !== \"function\") {\n            throw new TypeError(\n                `Invalid argment of type ${typeof work} passed to Loader class internal \"createWorker\" function.`\n            );\n        }\n\n        const url = URL.createObjectURL(\n            new Blob([\"(\", work.toString(), \")()\"], {\n                type: \"application/javascript\",\n            })\n        );\n\n        const worker = new Worker(url);\n\n        URL.revokeObjectURL(url);\n\n        return worker;\n    };\n\n    /**\n     *\n     * @private\n     * @static\n     */\n    const work = () => {\n        onmessage = async (event) => {\n            const data = event.data;\n\n            // ...\n            let message;\n            try {\n                const response = await fetch(data.href, data.options);\n                const blob = await response.blob();\n\n                message = {\n                    status: response.status,\n                    statusText: response.statusText,\n                    blob: blob,\n                };\n            } catch (e) {\n                message = {\n                    status: 0,\n                    statusText: e,\n                };\n            }\n\n            // ...\n            message.href = data.href;\n            postMessage(message);\n        };\n    };\n\n    // ...\n    let worker = null;\n\n    /**\n     *\n     * @private\n     */\n    const getOrCreateWorker = () =>\n        worker ? worker : (worker = createWorker(work));\n\n    // ...\n    const cache = {};\n\n    /**\n     *\n     * @private\n     * @param {String} href\n     * @param {Object} options\n     */\n    var fetch$1 = async (href, options = {}) => {\n        // ...\n        if (href in cache) {\n            return await cache[href];\n        }\n\n        // ...\n        return (cache[href] = new Promise((resolve, reject) => {\n            const worker = getOrCreateWorker();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch,\n            });\n\n            // ...\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(new Error(`${data.statusText} for ${data.href} resource.`));\n            });\n        }));\n    };\n\n    class Loader {\n        /**\n         *\n         * @param {Object} options\n         */\n        constructor(options) {\n            this.options = { ...{ fetch: { cors: \"no-cors\" } }, ...options };\n        }\n\n        /**\n         *\n         * @param {Array.<String>|Array.<URL>|String|URL} arg\n         * @returns {Array.<Promise>|Promise}\n         */\n        fetch(arg) {\n            // ...\n            if (Array.isArray(arg)) {\n                return arg.map((a) => this.fetch(a));\n            }\n\n            // ...\n            if (typeof arg === \"string\") {\n                return this.fetch(getURL(arg));\n            }\n\n            // ...\n            if (arg instanceof URL) {\n                return fetch$1(arg.href, this.options);\n            }\n\n            // ...\n            return Promise.reject(\n                new TypeError(\n                    `Invalid argment of type ${typeof arg} passed to Loader class \"fetch\" method.`\n                )\n            );\n        }\n    }\n\n    return Loader;\n\n})));\n"]}