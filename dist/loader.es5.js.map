{"version":3,"sources":["loader.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","body","onmessage","event","fetch","data","href","options","response","blob","status","statusText","postMessage","lworker","requests","get","url","URL","createObjectURL","Blob","toString","type","Worker","revokeObjectURL","terminate","cache","lfetch","Promise","resolve","reject","worker","addEventListener","Error","css","element","document","sheet","CSSStyleSheet","replace","adoptedStyleSheets","html","reader","FileReader","promise","buffer","srcElement","result","readAsText","filter","length","DOMParser","parseFromString","querySelectorAll","map","x","outerHTML","reduce","y","HTMLElement","innerHTML","image","HTMLImageElement","Image","onload","onerror","src","javascript","lload","TypeError","resource","Array","isArray","a","createElement","isArrayOpts","i","load"],"mappings":"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","file":"loader.es5.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('Loader', factory) :\n    (global = global || self, global.Loader = factory());\n}(this, (function () { 'use strict';\n\n    /**\n     *\n     * @private\n     * @static\n     */\n    const body = () =>\n        (onmessage = async (event) => {\n            //\n            try {\n                const response = await fetch(event.data.href, event.data.options);\n                const blob = await response.blob();\n\n                event.data.status = response.status;\n                event.data.statusText = response.statusText;\n                event.data.blob = blob;\n            } catch (e) {\n                event.data.statusText = e;\n            }\n\n            // ...\n            postMessage(event.data);\n        });\n\n    // ...\n    let lworker = null;\n    let requests = 0;\n\n    /**\n     *\n     * @private\n     */\n    const get = () => {\n        // ...\n        requests++;\n\n        // ...\n        if (lworker) {\n            return lworker;\n        }\n\n        // ...\n        const url = URL.createObjectURL(\n            new Blob([\"(\", body.toString(), \")()\"], {\n                type: \"application/javascript\",\n            })\n        );\n\n        // ...\n        lworker = new Worker(url);\n\n        // ...\n        URL.revokeObjectURL(url);\n\n        //\n        return lworker;\n    };\n\n    /**\n     *\n     * @private\n     */\n    const terminate = () => {\n        //\n        requests--;\n\n        //\n        if (requests <= 0) {\n            lworker.terminate();\n\n            lworker = null;\n        }\n    };\n\n    // ...\n    const cache = {};\n\n    /**\n     * Fetches a resource url in the secondary thread and retrieves it as a blob\n     * @private\n     * @param {String} href The resource url to be fetched\n     * @param {Object} options The fetch options object\n     * @returns {Promise} The fetch promise\n     */\n    var lfetch = async (href, options) => {\n        // ...\n        options = {\n            ...{\n                cache: true,\n                fetch: {},\n            },\n            ...options,\n        };\n\n        // ...\n        if (options.cache === true && href in cache) {\n            return await cache[href];\n        }\n\n        // ...\n        return (cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = get();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch,\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(new Error(`${data.statusText} for ${data.href} resource.`));\n            });\n        }));\n    };\n\n    var css = async (blob, options) => {\n        //\n        options = { ...{ element: document }, options };\n\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const sheet = new CSSStyleSheet();\n\n        //\n        await sheet.replace(`@import url(\"${url}\")`);\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        if (\n            typeof options.element === \"object\" &&\n            \"adoptedStyleSheets\" in options.element\n        ) {\n            options.element.adoptedStyleSheets = [\n                ...options.element.adoptedStyleSheets,\n                sheet,\n            ];\n        }\n\n        //\n        return sheet;\n    };\n\n    var html = async (blob, options) => {\n        //\n        const reader = new FileReader();\n\n        //\n        const promise = new Promise((resolve) =>\n            reader.addEventListener(\"loadend\", (buffer) =>\n                resolve(buffer.srcElement.result)\n            )\n        );\n\n        //\n        reader.readAsText(blob);\n\n        //\n        let result = await promise;\n\n        //\n        if (typeof options.filter === \"string\" && options.filter.length) {\n            //\n            result = new DOMParser().parseFromString(result, \"text/html\").body;\n            //\n            result = [...result.querySelectorAll(options.filter)];\n            //\n            result = result.map((x) => x.outerHTML).reduce((x, y) => x + y);\n        }\n\n        //\n        if (options.element && options.element instanceof HTMLElement) {\n            options.element.innerHTML = result;\n        }\n\n        //\n        return promise;\n    };\n\n    var image = async (blob, options) => {\n        //\n        const image =\n            options.element instanceof HTMLImageElement\n                ? options.element\n                : new Image();\n\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const promise = new Promise((resolve, reject) => {\n            image.onload = resolve;\n            image.onerror = reject;\n        });\n\n        //\n        image.src = url;\n\n        //\n        const result = await promise;\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        return result;\n    };\n\n    var javascript = async (blob) => {\n        //\n        const url = URL.createObjectURL(blob);\n\n        //\n        const result = await import(url);\n\n        //\n        URL.revokeObjectURL(url);\n\n        //\n        return result;\n    };\n\n    /**\n     * Loads a resource, which usually consists in attaching it to an existent DOM element\n     * @private\n     * @param {Blob} blob The resource to be loaded in Blob form\n     * @param {Object} options The resource load options\n     * @returns {Promise} The resource load in promise form\n     */\n    var lload = async (blob, options) => {\n        //...\n        // TODO: get all major mimetypes\n        switch (blob.type) {\n            //...\n            case \"image/png\":\n            case \"image/jpeg\":\n                return await image(blob, options);\n\n            //...\n            case \"text/html\":\n                return await html(blob, options);\n\n            //...\n            case \"text/css\":\n                return await css(blob, options);\n\n            //...\n            case \"text/javascript\":\n                return await javascript(blob);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof blob} passed to Loader class \"fetch\" method.`\n        );\n    };\n\n    class Loader {\n        constructor() {}\n\n        /**\n         * Fetches one or more resources url\n         * @param {Array.<String>|Array.<URL>|String|URL} resource The resource(s) url to be fetched in a separate thread\n         * @param {Object} options The fetch options object\n         * @returns {Array.<Promise>|Promise} The fetch promise(s)\n         */\n        async fetch(resource, options) {\n            // ...\n            if (Array.isArray(resource)) {\n                return await resource.map((a) => this.fetch(a, options));\n            }\n\n            // ...\n            if (typeof resource === \"string\") {\n                const a = document.createElement(\"a\");\n\n                a.href = resource;\n\n                return await this.fetch(new URL(a), options);\n            }\n\n            // ...\n            if (resource instanceof URL) {\n                return await lfetch(resource.href, options);\n            }\n\n            // ...\n            throw new TypeError(\n                `Invalid argment of type ${typeof resource} passed to Loader class \"fetch\" method.`\n            );\n        }\n\n        /**\n         * Loads one or more resources url considering the passed options object and the resource mime type to be loaded\n         * @param {Array.<String>|Array.<URL>|Array.<Blob>|String|URL|Blob} resource The resource(s) to be loaded\n         * @param {Object} options The loader type options\n         * @returns {Array.<Promise>|Promise} The load promise(s)\n         */\n        async load(resource, options) {\n            // ...\n            if (Array.isArray(resource)) {\n                const isArrayOpts = Array.isArray(options);\n\n                return await resource.map((a, i) =>\n                    this.load(a, isArrayOpts ? options[i] : options)\n                );\n            }\n\n            // ...\n            const blob =\n                resource instanceof Blob\n                    ? resource\n                    : await this.fetch(resource, options);\n\n            // ...\n            return await lload(blob, options);\n        }\n    }\n\n    return Loader;\n\n})));\n"]}