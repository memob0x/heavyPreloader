{"version":3,"sources":["unknown"],"names":["lworker","Fetch","cache","clear","fetch","href","options","Promise","resolve","reject","worker","postMessage","addEventListener","event","data","terminate","status","blob","Error","statusText"],"mappings":"2nBAAA,MAAOA,CAAAA,OAAP,KAAoB,qBAApB,C,yBAKA,cAAe,MAAMC,CAAAA,KAAM,oDAEd,EAFc,IAOvB,GAAIC,CAAAA,KAAJ,EAAY,CACR,6BAAO,IAAP,SACH,CAKDC,KAAK,EAAG,CACJ,kCAAc,EAAd,EACH,CASD,KAAMC,CAAAA,KAAN,CAAYC,IAAZ,CAAkBC,OAAlB,CAA2B,CAEvBA,OAAO,CAAG,CACNJ,KAAK,CAAE,IADD,CAENE,KAAK,CAAE,EAFD,CAGN,GAAGE,OAHG,CAAV,CAOA,GAAIA,OAAO,CAACJ,KAAR,GAAkB,IAAlB,EAA0BG,IAAI,0BAAI,IAAJ,QAAlC,CAAmD,CAC/C,MAAO,MAAM,oCAAYA,IAAZ,CAAb,CACH,CAGD,MAAQ,oCAAYA,IAAZ,EAAoB,GAAIE,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CAEzD,KAAMC,CAAAA,MAAM,CAAGV,OAAO,CAACU,MAAR,EAAf,CAGAA,MAAM,CAACC,WAAP,CAAmB,CACfN,IAAI,CAAEA,IADS,CAEfC,OAAO,CAAEA,OAAO,CAACF,KAFF,CAAnB,EAOAM,MAAM,CAACE,gBAAP,CAAwB,SAAxB,CAAoCC,KAAD,EAAW,CAC1C,KAAMC,CAAAA,IAAI,CAAGD,KAAK,CAACC,IAAnB,CAGA,GAAIA,IAAI,CAACT,IAAL,GAAcA,IAAlB,CAAwB,CACpB,OACH,CAGDL,OAAO,CAACe,SAAR,GAGA,GAAID,IAAI,CAACE,MAAL,GAAgB,GAApB,CAAyB,CACrBR,OAAO,CAACM,IAAI,CAACG,IAAN,CAAP,CAEA,OACH,CAGDR,MAAM,CACF,GAAIS,CAAAA,KAAJ,CAAW,GAAEJ,IAAI,CAACK,UAAW,QAAOL,IAAI,CAACT,IAAK,YAA9C,CADE,CAAN,CAGH,CAtBD,EAuBH,CAnC2B,CAA5B,CAoCH,CA3EsB","sourcesContent":["import lworker from \"./loader.worker.mjs\";\n\n/**\n *\n */\nexport default class Fetch {\n    // ...\n    #cache = {};\n\n    /**\n     *\n     */\n    get cache() {\n        return this.#cache;\n    }\n\n    /**\n     *\n     */\n    clear() {\n        this.#cache = {};\n    }\n\n    /**\n     * Fetches a resource url in the secondary thread and retrieves it as a blob\n     * @private\n     * @param {String} href The resource url to be fetched\n     * @param {Object} options The fetch options object\n     * @returns {Promise} The fetch promise\n     */\n    async fetch(href, options) {\n        // ...\n        options = {\n            cache: true,\n            fetch: {},\n            ...options\n        };\n\n        // ...\n        if (options.cache === true && href in this.#cache) {\n            return await this.#cache[href];\n        }\n\n        // ...\n        return (this.#cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = lworker.worker();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                lworker.terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(\n                    new Error(`${data.statusText} for ${data.href} resource.`)\n                );\n            });\n        }));\n    }\n}\n"]}