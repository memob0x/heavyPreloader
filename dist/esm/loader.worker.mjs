var _worker,_requests,_temp;function _classPrivateFieldSet(receiver,privateMap,value){var descriptor=privateMap.get(receiver);if(!descriptor){throw new TypeError("attempted to set private field on non-instance");}if(descriptor.set){descriptor.set.call(receiver,value);}else{if(!descriptor.writable){throw new TypeError("attempted to set read only private field");}descriptor.value=value;}return value;}function _classPrivateFieldGet(receiver,privateMap){var descriptor=privateMap.get(receiver);if(!descriptor){throw new TypeError("attempted to get private field on non-instance");}if(descriptor.get){return descriptor.get.call(receiver);}return descriptor.value;}const createDynamicWorker=body=>{const url=URL.createObjectURL(new Blob(["(",body.toString(),")()"],{type:"application/javascript"}));const worker=new Worker(url);URL.revokeObjectURL(url);return worker;};const createFetchWorker=()=>createDynamicWorker(()=>onmessage=async event=>{try{const response=await fetch(event.data.href,event.data.options);const blob=await response.blob();event.data.status=response.status;event.data.statusText=response.statusText;event.data.blob=blob;}catch(e){event.data.statusText=e;}postMessage(event.data);});export default new(_temp=(_worker=new WeakMap(),_requests=new WeakMap(),class LoaderWorker{constructor(){_worker.set(this,{writable:true,value:null});_requests.set(this,{writable:true,value:0});}terminate(){if(_classPrivateFieldGet(this,_requests)>0){var _this$requests;_classPrivateFieldSet(this,_requests,(_this$requests=+_classPrivateFieldGet(this,_requests))-1),_this$requests;}if(_classPrivateFieldGet(this,_requests)===0){_classPrivateFieldGet(this,_worker).terminate();_classPrivateFieldSet(this,_worker,null);}return _classPrivateFieldGet(this,_worker);}worker(){var _this$requests2;_classPrivateFieldSet(this,_requests,(_this$requests2=+_classPrivateFieldGet(this,_requests))+1),_this$requests2;if(_classPrivateFieldGet(this,_worker)){return _classPrivateFieldGet(this,_worker);}_classPrivateFieldSet(this,_worker,createFetchWorker());return _classPrivateFieldGet(this,_worker);}}),_temp)();