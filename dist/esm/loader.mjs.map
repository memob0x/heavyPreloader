{"version":3,"sources":["unknown"],"names":["getURL","Fetch","Load","Loader","fetch","resource","options","Array","isArray","map","a","URL","href","TypeError","load","isArrayOpts","i","blob","Blob","register","type","loader"],"mappings":"qQAAA,OAASA,MAAT,KAAuB,oBAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,C,iDAEA,cAAe,MAAMC,CAAAA,MAAO,oDACf,GAAIF,CAAAA,KAAJ,EADe,uCAEhB,GAAIC,CAAAA,IAAJ,EAFgB,IAUxB,KAAME,CAAAA,KAAN,CAAYC,QAAZ,CAAsBC,OAAtB,CAA+B,CAE3B,GAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,CAA6B,CACzB,MAAO,MAAMA,CAAAA,QAAQ,CAACI,GAAT,CAAcC,CAAD,EAAO,KAAKN,KAAL,CAAWM,CAAX,CAAcJ,OAAd,CAApB,CAAb,CACH,CAGD,GAAI,MAAOD,CAAAA,QAAP,GAAoB,QAAxB,CAAkC,CAC9B,MAAO,MAAM,MAAKD,KAAL,CAAWJ,MAAM,CAACK,QAAD,CAAjB,CAA6BC,OAA7B,CAAb,CACH,CAGD,GAAID,QAAQ,WAAYM,CAAAA,GAAxB,CAA6B,CACzB,MAAO,MAAM,oCAAYP,KAAZ,CAAkBC,QAAQ,CAACO,IAA3B,CAAiCN,OAAjC,CAAb,CACH,CAGD,KAAM,IAAIO,CAAAA,SAAJ,CACD,2BAA0B,MAAOR,CAAAA,QAAS,yCADzC,CAAN,CAGH,CAQD,KAAMS,CAAAA,IAAN,CAAWT,QAAX,CAAqBC,OAArB,CAA8B,CAE1B,GAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,CAA6B,CACzB,KAAMU,CAAAA,WAAW,CAAGR,KAAK,CAACC,OAAN,CAAcF,OAAd,CAApB,CAEA,MAAO,MAAMD,CAAAA,QAAQ,CAACI,GAAT,CAAa,CAACC,CAAD,CAAIM,CAAJ,GACtB,KAAKF,IAAL,CAAUJ,CAAV,CAAaK,WAAW,CAAGT,OAAO,CAACU,CAAD,CAAV,CAAgBV,OAAxC,CADS,CAAb,CAGH,CAGD,KAAMW,CAAAA,IAAI,CACNZ,QAAQ,WAAYa,CAAAA,IAApB,CACMb,QADN,CAEM,KAAM,MAAKD,KAAL,CAAWC,QAAX,CAAqBC,OAArB,CAHhB,CAMA,MAAO,MAAM,mCAAWQ,IAAX,CAAgBG,IAAhB,CAAsBX,OAAtB,CAAb,CACH,CAQDa,QAAQ,CAACC,IAAD,CAAOC,MAAP,CAAe,CACnB,MAAO,mCAAWF,QAAX,CAAoBC,IAApB,CAA0BC,MAA1B,CAAP,CACH,CAlEuB","sourcesContent":["import { getURL } from \"./loader.utils.mjs\";\nimport Fetch from \"./loader.fetch.mjs\";\nimport Load from \"./loader.load.mjs\";\n\nexport default class Loader {\n    #fetch = new Fetch();\n    #load = new Load();\n\n    /**\n     * Fetches one or more resources url\n     * @param {Array.<String>|Array.<URL>|String|URL} resource The resource(s) url to be fetched in a separate thread\n     * @param {Object} options The fetch options object\n     * @returns {Array.<Promise>|Promise} The fetch promise(s)\n     */\n    async fetch(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            return await resource.map((a) => this.fetch(a, options));\n        }\n\n        // ...\n        if (typeof resource === \"string\") {\n            return await this.fetch(getURL(resource), options);\n        }\n\n        // ...\n        if (resource instanceof URL) {\n            return await this.#fetch.fetch(resource.href, options);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof resource} passed to Loader class \"fetch\" method.`\n        );\n    }\n\n    /**\n     * Loads one or more resources url considering the passed options object and the resource mime type to be loaded\n     * @param {Array.<String>|Array.<URL>|Array.<Blob>|String|URL|Blob} resource The resource(s) to be loaded\n     * @param {Object} options The loader type options\n     * @returns {Array.<Promise>|Promise} The load promise(s)\n     */\n    async load(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            const isArrayOpts = Array.isArray(options);\n\n            return await resource.map((a, i) =>\n                this.load(a, isArrayOpts ? options[i] : options)\n            );\n        }\n\n        // ...\n        const blob =\n            resource instanceof Blob\n                ? resource\n                : await this.fetch(resource, options);\n\n        // ...\n        return await this.#load.load(blob, options);\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        return this.#load.register(type, loader);\n    }\n}\n"]}