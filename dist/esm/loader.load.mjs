function _classPrivateFieldGet(receiver,privateMap){var descriptor=privateMap.get(receiver);if(!descriptor){throw new TypeError("attempted to get private field on non-instance");}if(descriptor.get){return descriptor.get.call(receiver);}return descriptor.value;}var _loaders=new WeakMap();export default class Load{constructor(){_loaders.set(this,{writable:true,value:{}});}register(type,loader){_classPrivateFieldGet(this,_loaders)[type]=loader;}async load(blob,options){const type=blob.type;const keys=type.split("/").reduce((x,y)=>[type,x,y]);for(const key in keys){const loader=keys[key];if(loader in _classPrivateFieldGet(this,_loaders)){return await _classPrivateFieldGet(this,_loaders)[loader](blob,options);}}throw new TypeError(`Invalid ${blob.type} media type passed to Loader class "load" method.`);}}