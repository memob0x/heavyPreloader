{"version":3,"sources":["unknown"],"names":["reader","FileReader","blob","options","promise","Promise","resolve","onload","buffer","srcElement","result","onerror","onabort","reject","Error","type","readAsText","filter","length","DOMParser","parseFromString","body","querySelectorAll","map","x","outerHTML","reduce","y","element","HTMLElement","innerHTML"],"mappings":"AACA,KAAMA,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CAGA,eAAe,MAAOC,IAAP,CAAaC,OAAb,GAAyB,6BAEpC,KAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAaC,OAAD,EAAa,CACrCN,MAAM,CAACO,MAAP,CAAiBC,MAAD,EAAYF,OAAO,CAACE,MAAM,CAACC,UAAP,CAAkBC,MAAnB,CAAnC,CACAV,MAAM,CAACW,OAAP,CAAiBX,MAAM,CAACY,OAAP,CAAiB,IAC9BC,MAAM,CAAC,GAAIC,CAAAA,KAAJ,CAAW,iBAAgBZ,IAAI,CAACa,IAAK,YAArC,CAAD,CADV,CAEH,CAJe,CAAhB,CAOAf,MAAM,CAACgB,UAAP,CAAkBd,IAAlB,EAGA,GAAIQ,CAAAA,MAAM,CAAG,KAAMN,CAAAA,OAAnB,CAGA,GAAI,OAAOD,OAAP,SAAOA,OAAP,iBAAOA,OAAO,CAAEc,MAAhB,IAA2B,QAA3B,GAAuCd,OAAvC,SAAuCA,OAAvC,kCAAuCA,OAAO,CAAEc,MAAhD,0CAAuC,gBAAiBC,MAAxD,CAAJ,CAAoE,CAEhER,MAAM,CAAG,GAAIS,CAAAA,SAAJ,GAAgBC,eAAhB,CAAgCV,MAAhC,CAAwC,WAAxC,EAAqDW,IAA9D,CAEAX,MAAM,CAAG,CAAC,GAAGA,MAAM,CAACY,gBAAP,CAAwBnB,OAAO,CAACc,MAAhC,CAAJ,CAAT,CAEAP,MAAM,CAAGA,MAAM,CAACQ,MAAP,CACHR,MAAM,CAACa,GAAP,CAAYC,CAAD,EAAOA,CAAC,CAACC,SAApB,EAA+BC,MAA/B,CAAsC,CAACF,CAAD,CAAIG,CAAJ,GAAUH,CAAC,CAAGG,CAApD,CADG,CAEHjB,MAFN,CAGH,CAGD,GACI,CAAAP,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,CAAEyB,OAAT,WAA4BC,CAAAA,WAA5B,EACA,MAAOnB,CAAAA,MAAP,GAAkB,QADlB,YAEAA,MAFA,kCAEA,QAAQQ,MAFR,CADJ,CAIE,CACEf,OAAO,CAACyB,OAAR,CAAgBE,SAAhB,CAA4BpB,MAA5B,CACH,CAGD,MAAON,CAAAA,OAAP,CACH,CArCD","sourcesContent":["//\nconst reader = new FileReader();\n\n//\nexport default async (blob, options) => {\n    //\n    const promise = new Promise((resolve) => {\n        reader.onload = (buffer) => resolve(buffer.srcElement.result);\n        reader.onerror = reader.onabort = () =>\n            reject(new Error(`Error loading ${blob.type} resource.`));\n    });\n\n    //\n    reader.readAsText(blob);\n\n    //\n    let result = await promise;\n\n    //\n    if (typeof options?.filter === \"string\" && options?.filter?.length) {\n        //\n        result = new DOMParser().parseFromString(result, \"text/html\").body;\n        //\n        result = [...result.querySelectorAll(options.filter)];\n        //\n        result = result.length\n            ? result.map((x) => x.outerHTML).reduce((x, y) => x + y)\n            : result;\n    }\n\n    //\n    if (\n        options?.element instanceof HTMLElement &&\n        typeof result === \"string\" &&\n        result?.length\n    ) {\n        options.element.innerHTML = result;\n    }\n\n    //\n    return promise;\n};\n"]}