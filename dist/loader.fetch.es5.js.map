{"version":3,"sources":["loader.fetch.mjs"],"names":["global","factory","exports","module","define","amd","self","Loader","createDynamicWorker","body","url","URL","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createFetchWorker","onmessage","event","fetch","data","href","options","response","blob","status","statusText","postMessage","lworker","_worker","_requests","terminate","loader_fetch","cache","Promise","resolve","reject","addEventListener","Error"],"mappings":"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","file":"loader.fetch.es5.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define('Loader', factory) :\n    (global = global || self, global.Loader = factory());\n}(this, (function () { 'use strict';\n\n    /**\n     *\n     * @private\n     * @static\n     * TODO: provide unit test\n     */\n    const createDynamicWorker = (body) => {\n        // ...\n        const url = URL.createObjectURL(\n            new Blob([\"(\", body.toString(), \")()\"], {\n                type: \"application/javascript\",\n            })\n        );\n\n        // ...\n        const worker = new Worker(url);\n\n        // ...\n        URL.revokeObjectURL(url);\n\n        // ...\n        return worker;\n    };\n\n    /**\n     *\n     * @private\n     * @static\n     * TODO: provide unit test\n     */\n    const createFetchWorker = () =>\n        createDynamicWorker(\n            () =>\n                (onmessage = async (event) => {\n                    //\n                    try {\n                        const response = await fetch(\n                            event.data.href,\n                            event.data.options\n                        );\n                        const blob = await response.blob();\n\n                        event.data.status = response.status;\n                        event.data.statusText = response.statusText;\n                        event.data.blob = blob;\n                    } catch (e) {\n                        event.data.statusText = e;\n                    }\n\n                    // ...\n                    postMessage(event.data);\n                })\n        );\n\n    /**\n     *\n     */\n    var lworker = new (class LoaderWorker {\n        constructor() {\n            this._worker = null;\n\n            this._requests = 0;\n        }\n\n        terminate() {\n            //\n            //\n            if (this._requests > 0) {\n                this._requests--;\n            }\n\n            //\n            if (this._requests === 0) {\n                this._worker.terminate();\n\n                this._worker = null;\n            }\n\n            //\n            return this._worker;\n        }\n\n        worker() {\n            // ...\n            this._requests++;\n\n            // ...\n            if (this._worker) {\n                return this._worker;\n            }\n\n            // ...\n            this._worker = createFetchWorker();\n\n            //\n            return this._worker;\n        }\n    })();\n\n    /**\n     *\n     */\n    var loader_fetch = new (class LoaderFetch {\n        constructor() {\n            // ...\n            this.cache = {};\n        }\n\n        /**\n         * Fetches a resource url in the secondary thread and retrieves it as a blob\n         * @private\n         * @param {String} href The resource url to be fetched\n         * @param {Object} options The fetch options object\n         * @returns {Promise} The fetch promise\n         */\n        async fetch(href, options) {\n            // ...\n            options = {\n                ...{\n                    cache: true,\n                    fetch: {},\n                },\n                ...options,\n            };\n\n            // ...\n            if (options.cache === true && href in this.cache) {\n                return await this.cache[href];\n            }\n\n            // ...\n            return (this.cache[href] = new Promise((resolve, reject) => {\n                //\n                const worker = lworker.worker();\n\n                // ...\n                worker.postMessage({\n                    href: href,\n                    options: options.fetch,\n                });\n\n                // ...\n                // TODO: possibly use messageerror for reject?\n                worker.addEventListener(\"message\", (event) => {\n                    const data = event.data;\n\n                    // ...\n                    if (data.href !== href) {\n                        return;\n                    }\n\n                    //\n                    lworker.terminate();\n\n                    // ...\n                    if (data.status === 200) {\n                        resolve(data.blob);\n\n                        return;\n                    }\n\n                    // ...\n                    reject(\n                        new Error(`${data.statusText} for ${data.href} resource.`)\n                    );\n                });\n            }));\n        }\n    })();\n\n    return loader_fetch;\n\n})));\n"]}