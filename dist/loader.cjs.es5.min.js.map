{"version":3,"file":"loader.cjs.es5.min.js","sources":["../src/loader.utils.mjs","../src/loader.worker.mjs","../src/loader.fetch.mjs","../src/loader.load.css.mjs","../src/loader.load.html.mjs","../src/loader.load.image.mjs","../src/loader.load.javascript.mjs","../src/loader.load.mjs","../src/loader.mjs"],"sourcesContent":["const a = document.createElement(\"a\");\n\n/**\n *\n * @param {String} path\n * @returns {URL}\n */\nexport const getURL = (path) => {\n    a.href = path;\n\n    return new URL(a.href);\n};\n","/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createDynamicWorker = (body) => {\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\"\n        })\n    );\n\n    // ...\n    const worker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    // ...\n    return worker;\n};\n\n/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createFetchWorker = () =>\n    createDynamicWorker(\n        () =>\n            (onmessage = async (event) => {\n                //\n                try {\n                    const response = await fetch(\n                        event.data.href,\n                        event.data.options\n                    );\n                    const blob = await response.blob();\n\n                    event.data.status = response.status;\n                    event.data.statusText = response.statusText;\n                    event.data.blob = blob;\n                } catch (e) {\n                    event.data.statusText = e;\n                }\n\n                // ...\n                postMessage(event.data);\n            })\n    );\n\n/**\n *\n */\nexport default new (class LoaderWorker {\n    constructor() {\n        this._worker = null;\n\n        this._requests = 0;\n    }\n\n    terminate() {\n        //\n        //\n        if (this._requests > 0) {\n            this._requests--;\n        }\n\n        //\n        if (this._requests === 0) {\n            this._worker.terminate();\n\n            this._worker = null;\n        }\n\n        //\n        return this._worker;\n    }\n\n    worker() {\n        // ...\n        this._requests++;\n\n        // ...\n        if (this._worker) {\n            return this._worker;\n        }\n\n        // ...\n        this._worker = createFetchWorker();\n\n        //\n        return this._worker;\n    }\n})();\n","import lworker from \"./loader.worker.mjs\";\n\n/**\n *\n */\nexport default new (class LoaderFetch {\n    constructor() {\n        // ...\n        this.cache = {};\n    }\n\n    /**\n     * Fetches a resource url in the secondary thread and retrieves it as a blob\n     * @private\n     * @param {String} href The resource url to be fetched\n     * @param {Object} options The fetch options object\n     * @returns {Promise} The fetch promise\n     */\n    async fetch(href, options) {\n        // ...\n        options = {\n            ...{\n                cache: true,\n                fetch: {}\n            },\n            ...options\n        };\n\n        // ...\n        if (options.cache === true && href in this.cache) {\n            return await this.cache[href];\n        }\n\n        // ...\n        return (this.cache[href] = new Promise((resolve, reject) => {\n            //\n            const worker = lworker.worker();\n\n            // ...\n            worker.postMessage({\n                href: href,\n                options: options.fetch\n            });\n\n            // ...\n            // TODO: possibly use messageerror for reject?\n            worker.addEventListener(\"message\", (event) => {\n                const data = event.data;\n\n                // ...\n                if (data.href !== href) {\n                    return;\n                }\n\n                //\n                lworker.terminate();\n\n                // ...\n                if (data.status === 200) {\n                    resolve(data.blob);\n\n                    return;\n                }\n\n                // ...\n                reject(\n                    new Error(`${data.statusText} for ${data.href} resource.`)\n                );\n            });\n        }));\n    }\n})();\n","export default async (blob, options) => {\n    //\n    options = { ...{ element: document }, options };\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const sheet = new CSSStyleSheet();\n\n    //\n    await sheet.replace(`@import url(\"${url}\")`);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    if (\n        typeof options.element === \"object\" &&\n        \"adoptedStyleSheets\" in options.element\n    ) {\n        options.element.adoptedStyleSheets = [\n            ...options.element.adoptedStyleSheets,\n            sheet\n        ];\n    }\n\n    //\n    return sheet;\n};\n","export default async (blob, options) => {\n    //\n    const reader = new FileReader();\n\n    //\n    const promise = new Promise((resolve) =>\n        reader.addEventListener(\"loadend\", (buffer) =>\n            resolve(buffer.srcElement.result)\n        )\n    );\n\n    //\n    reader.readAsText(blob);\n\n    //\n    let result = await promise;\n\n    //\n    if (\n        options &&\n        typeof options.filter === \"string\" &&\n        options.filter.length\n    ) {\n        //\n        result = new DOMParser().parseFromString(result, \"text/html\").body;\n        //\n        result = [...result.querySelectorAll(options.filter)];\n        //\n        result = result.length\n            ? result.map((x) => x.outerHTML).reduce((x, y) => x + y)\n            : result;\n    }\n\n    //\n    if (\n        options &&\n        options.element &&\n        options.element instanceof HTMLElement &&\n        result &&\n        typeof result === \"string\" &&\n        result.length\n    ) {\n        options.element.innerHTML = result;\n    }\n\n    //\n    return promise;\n};\n","export default async (blob, options) => {\n    //\n    const image =\n        options && options.element instanceof HTMLImageElement\n            ? options.element\n            : new Image();\n\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const promise = new Promise((resolve, reject) => {\n        image.onload = resolve;\n        image.onerror = () =>\n            reject(new Error(`Error loading image ${blob.type}`));\n    });\n\n    //\n    image.src = url;\n\n    //\n    const result = await promise;\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","export default async (blob) => {\n    //\n    const url = URL.createObjectURL(blob);\n\n    //\n    const result = await import(url);\n\n    //\n    URL.revokeObjectURL(url);\n\n    //\n    return result;\n};\n","import css from \"./loader.load.css.mjs\";\nimport html from \"./loader.load.html.mjs\";\nimport image from \"./loader.load.image.mjs\";\nimport javascript from \"./loader.load.javascript.mjs\";\n\n/**\n *\n */\nexport default new (class LoaderLoad {\n    constructor() {\n        // loaders closure, filled with default loaders\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n        this.loaders = {\n            image: image,\n            html: html,\n            css: css,\n            javascript: javascript\n        };\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        this.loaders[type] = loader;\n    }\n\n    /**\n     * Loads a resource, which usually consists in attaching it to an existent DOM element\n     * @private\n     * @param {Blob} blob The resource to be loaded in Blob form\n     * @param {Object} options The resource load options\n     * @returns {Promise} The resource load in promise form\n     */\n    async load(blob, options) {\n        const type = blob.type;\n\n        //...\n        const keys = type.split(\"/\").reduce((x, y) => [type, x, y]);\n\n        // ...\n        for (const key in keys) {\n            const loader = keys[key];\n\n            if (loader in this.loaders) {\n                return await this.loaders[loader](blob, options);\n            }\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid ${blob.type} media type passed to Loader class \"load\" method.`\n        );\n    }\n})();\n","import { getURL } from \"./loader.utils.mjs\";\nimport lfetch from \"./loader.fetch.mjs\";\nimport lload from \"./loader.load.mjs\";\n\nexport default class Loader {\n    constructor() {}\n\n    /**\n     * Fetches one or more resources url\n     * @param {Array.<String>|Array.<URL>|String|URL} resource The resource(s) url to be fetched in a separate thread\n     * @param {Object} options The fetch options object\n     * @returns {Array.<Promise>|Promise} The fetch promise(s)\n     */\n    async fetch(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            return await resource.map((a) => this.fetch(a, options));\n        }\n\n        // ...\n        if (typeof resource === \"string\") {\n            return await this.fetch(getURL(resource), options);\n        }\n\n        // ...\n        if (resource instanceof URL) {\n            return await lfetch.fetch(resource.href, options);\n        }\n\n        // ...\n        throw new TypeError(\n            `Invalid argment of type ${typeof resource} passed to Loader class \"fetch\" method.`\n        );\n    }\n\n    /**\n     * Loads one or more resources url considering the passed options object and the resource mime type to be loaded\n     * @param {Array.<String>|Array.<URL>|Array.<Blob>|String|URL|Blob} resource The resource(s) to be loaded\n     * @param {Object} options The loader type options\n     * @returns {Array.<Promise>|Promise} The load promise(s)\n     */\n    async load(resource, options) {\n        // ...\n        if (Array.isArray(resource)) {\n            const isArrayOpts = Array.isArray(options);\n\n            return await resource.map((a, i) =>\n                this.load(a, isArrayOpts ? options[i] : options)\n            );\n        }\n\n        // ...\n        const blob =\n            resource instanceof Blob\n                ? resource\n                : await this.fetch(resource, options);\n\n        // ...\n        return await lload.load(blob, options);\n    }\n\n    /**\n     *\n     * @param {String} type\n     * @param {Function} loader\n     * @returns {void}\n     */\n    register(type, loader) {\n        return lload.register(type, loader);\n    }\n}\n"],"names":["a","document","createElement","createFetchWorker","body","onmessage","event","fetch","data","href","options","response","blob","status","statusText","postMessage","url","URL","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","_worker","_requests","this","terminate","cache","Promise","resolve","reject","lworker","addEventListener","Error","element","sheet","CSSStyleSheet","replace","_typeof","adoptedStyleSheets","reader","FileReader","promise","buffer","srcElement","result","readAsText","filter","length","DOMParser","parseFromString","querySelectorAll","map","x","outerHTML","reduce","y","HTMLElement","innerHTML","image","HTMLImageElement","Image","onload","onerror","src","loaders","html","css","javascript","loader","keys","split","key","TypeError","Loader","resource","Array","isArray","_this","path","lfetch","isArrayOpts","i","_this2","load","lload","register"],"mappings":"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"}