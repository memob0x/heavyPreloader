{"version":3,"sources":["unknown"],"names":["createDynamicWorker","body","url","URL","createObjectURL","Blob","toString","type","worker","Worker","revokeObjectURL","createFetchWorker","onmessage","event","response","fetch","data","href","options","blob","status","statusText","e","postMessage","LoaderWorker","terminate"],"mappings":"upBAMA,KAAMA,CAAAA,mBAAmB,CAAIC,IAAD,EAAU,CAElC,KAAMC,CAAAA,GAAG,CAAGC,GAAG,CAACC,eAAJ,CACR,GAAIC,CAAAA,IAAJ,CAAS,CAAC,GAAD,CAAMJ,IAAI,CAACK,QAAL,EAAN,CAAuB,KAAvB,CAAT,CAAwC,CACpCC,IAAI,CAAE,wBAD8B,CAAxC,CADQ,CAAZ,CAOA,KAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,MAAJ,CAAWP,GAAX,CAAf,CAGAC,GAAG,CAACO,eAAJ,CAAoBR,GAApB,EAGA,MAAOM,CAAAA,MAAP,CACH,CAhBD,CAwBA,KAAMG,CAAAA,iBAAiB,CAAG,IACtBX,mBAAmB,CACf,IACKY,SAAS,CAAG,KAAOC,CAAAA,KAAP,EAAiB,CAE1B,GAAI,CACA,KAAMC,CAAAA,QAAQ,CAAG,KAAMC,CAAAA,KAAK,CACxBF,KAAK,CAACG,IAAN,CAAWC,IADa,CAExBJ,KAAK,CAACG,IAAN,CAAWE,OAFa,CAA5B,CAIA,KAAMC,CAAAA,IAAI,CAAG,KAAML,CAAAA,QAAQ,CAACK,IAAT,EAAnB,CAEAN,KAAK,CAACG,IAAN,CAAWI,MAAX,CAAoBN,QAAQ,CAACM,MAA7B,CACAP,KAAK,CAACG,IAAN,CAAWK,UAAX,CAAwBP,QAAQ,CAACO,UAAjC,CACAR,KAAK,CAACG,IAAN,CAAWG,IAAX,CAAkBA,IAAlB,CACH,CAAC,MAAOG,CAAP,CAAU,CACRT,KAAK,CAACG,IAAN,CAAWK,UAAX,CAAwBC,CAAxB,CACH,CAGDC,WAAW,CAACV,KAAK,CAACG,IAAP,CAAX,CACH,CApBU,CADvB,CA2BA,cAAe,WAAK,KAAMQ,CAAAA,YAAa,qDACzB,IADyB,2CAEvB,CAFuB,IAInCC,SAAS,EAAG,CAGR,GAAI,sCAAiB,CAArB,CAAwB,oBACpB,+GACH,CAGD,GAAI,wCAAmB,CAAvB,CAA0B,CACtB,oCAAaA,SAAb,GAEA,mCAAe,IAAf,EACH,CAGD,6BAAO,IAAP,UACH,CAEDjB,MAAM,EAAG,qBAEL,iHAGA,yBAAI,IAAJ,UAAkB,CACd,6BAAO,IAAP,UACH,CAGD,mCAAeG,iBAAiB,EAAhC,EAGA,6BAAO,IAAP,UACH,CApCkC,CAAxB,uDAAf","sourcesContent":["/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createDynamicWorker = (body) => {\n    // ...\n    const url = URL.createObjectURL(\n        new Blob([\"(\", body.toString(), \")()\"], {\n            type: \"application/javascript\"\n        })\n    );\n\n    // ...\n    const worker = new Worker(url);\n\n    // ...\n    URL.revokeObjectURL(url);\n\n    // ...\n    return worker;\n};\n\n/**\n *\n * @private\n * @static\n * TODO: provide unit test\n */\nconst createFetchWorker = () =>\n    createDynamicWorker(\n        () =>\n            (onmessage = async (event) => {\n                //\n                try {\n                    const response = await fetch(\n                        event.data.href,\n                        event.data.options\n                    );\n                    const blob = await response.blob();\n\n                    event.data.status = response.status;\n                    event.data.statusText = response.statusText;\n                    event.data.blob = blob;\n                } catch (e) {\n                    event.data.statusText = e;\n                }\n\n                // ...\n                postMessage(event.data);\n            })\n    );\n\n/**\n *\n */\nexport default new (class LoaderWorker {\n    #worker = null;\n    #requests = 0;\n\n    terminate() {\n        //\n        //\n        if (this.#requests > 0) {\n            this.#requests--;\n        }\n\n        //\n        if (this.#requests === 0) {\n            this.#worker.terminate();\n\n            this.#worker = null;\n        }\n\n        //\n        return this.#worker;\n    }\n\n    worker() {\n        // ...\n        this.#requests++;\n\n        // ...\n        if (this.#worker) {\n            return this.#worker;\n        }\n\n        // ...\n        this.#worker = createFetchWorker();\n\n        //\n        return this.#worker;\n    }\n})();\n"]}