System.register("Loader",[],(function(t){"use strict";return{execute:function(){const e=document.createElement("a"),r=()=>(t=>{const e=URL.createObjectURL(new Blob(["(",t.toString(),")()"],{type:"application/javascript"})),r=new Worker(e);return URL.revokeObjectURL(e),r})(()=>onmessage=async t=>{try{const e=await fetch(t.data.href,t.data.options),r=await e.blob();t.data.status=e.status,t.data.statusText=e.statusText,t.data.blob=r}catch(e){t.data.statusText=e}postMessage(t.data)});var s=new class{constructor(){this._worker=null,this._requests=0}terminate(){return this._requests>0&&this._requests--,0===this._requests&&(this._worker.terminate(),this._worker=null),this._worker}worker(){return this._requests++,this._worker||(this._worker=r()),this._worker}},a=new class{constructor(){this.cache={}}async fetch(t,e){return!0===(e={cache:!0,fetch:{},...e}).cache&&t in this.cache?await this.cache[t]:this.cache[t]=new Promise((r,a)=>{const o=s.worker();o.postMessage({href:t,options:e.fetch}),o.addEventListener("message",e=>{const o=e.data;o.href===t&&(s.terminate(),200!==o.status?a(new Error(`${o.statusText} for ${o.href} resource.`)):r(o.blob))})})}},o=new class{constructor(){this.loaders={}}register(t,e){this.loaders[t]=e}async load(t,e){const r=t.type,s=r.split("/").reduce((t,e)=>[r,t,e]);for(const r in s){const a=s[r];if(a in this.loaders)return await this.loaders[a](t,e)}throw new TypeError(`Invalid ${t.type} media type passed to Loader class "load" method.`)}};t("default",class{constructor(){}async fetch(t,r){if(Array.isArray(t))return await t.map(t=>this.fetch(t,r));if("string"==typeof t)return await this.fetch((s=t,e.href=s,new URL(e.href)),r);var s;if(t instanceof URL)return await a.fetch(t.href,r);throw new TypeError(`Invalid argment of type ${typeof t} passed to Loader class "fetch" method.`)}async load(t,e){if(Array.isArray(t)){const r=Array.isArray(e);return await t.map((t,s)=>this.load(t,r?e[s]:e))}const r=t instanceof Blob?t:await this.fetch(t,e);return await o.load(r,e)}register(t,e){return o.register(t,e)}})}}}));
//# sourceMappingURL=loader.system.min.js.map
