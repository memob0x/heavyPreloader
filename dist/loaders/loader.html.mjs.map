{"version":3,"sources":["unknown"],"names":["blob","options","reader","FileReader","promise","Promise","resolve","addEventListener","buffer","srcElement","result","readAsText","filter","length","DOMParser","parseFromString","body","querySelectorAll","map","x","outerHTML","reduce","y","element","HTMLElement","innerHTML"],"mappings":"AAAA,eAAe,MAAOA,IAAP,CAAaC,OAAb,GAAyB,6BAEpC,KAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CAGA,KAAMC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAaC,OAAD,EACxBJ,MAAM,CAACK,gBAAP,CAAwB,SAAxB,CAAoCC,MAAD,EAC/BF,OAAO,CAACE,MAAM,CAACC,UAAP,CAAkBC,MAAnB,CADX,CADY,CAAhB,CAOAR,MAAM,CAACS,UAAP,CAAkBX,IAAlB,EAGA,GAAIU,CAAAA,MAAM,CAAG,KAAMN,CAAAA,OAAnB,CAGA,GAAI,OAAOH,OAAP,SAAOA,OAAP,iBAAOA,OAAO,CAAEW,MAAhB,IAA2B,QAA3B,GAAuCX,OAAvC,SAAuCA,OAAvC,kCAAuCA,OAAO,CAAEW,MAAhD,0CAAuC,gBAAiBC,MAAxD,CAAJ,CAAoE,CAEhEH,MAAM,CAAG,GAAII,CAAAA,SAAJ,GAAgBC,eAAhB,CAAgCL,MAAhC,CAAwC,WAAxC,EAAqDM,IAA9D,CAEAN,MAAM,CAAG,CAAC,GAAGA,MAAM,CAACO,gBAAP,CAAwBhB,OAAO,CAACW,MAAhC,CAAJ,CAAT,CAEAF,MAAM,CAAGA,MAAM,CAACG,MAAP,CACHH,MAAM,CAACQ,GAAP,CAAYC,CAAD,EAAOA,CAAC,CAACC,SAApB,EAA+BC,MAA/B,CAAsC,CAACF,CAAD,CAAIG,CAAJ,GAAUH,CAAC,CAAGG,CAApD,CADG,CAEHZ,MAFN,CAGH,CAGD,GACI,CAAAT,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,CAAEsB,OAAT,WAA4BC,CAAAA,WAA5B,EACA,MAAOd,CAAAA,MAAP,GAAkB,QADlB,YAEAA,MAFA,kCAEA,QAAQG,MAFR,CADJ,CAIE,CACEZ,OAAO,CAACsB,OAAR,CAAgBE,SAAhB,CAA4Bf,MAA5B,CACH,CAGD,MAAON,CAAAA,OAAP,CACH,CAxCD","sourcesContent":["export default async (blob, options) => {\n    //\n    const reader = new FileReader();\n\n    //\n    const promise = new Promise((resolve) =>\n        reader.addEventListener(\"loadend\", (buffer) =>\n            resolve(buffer.srcElement.result)\n        )\n    );\n\n    //\n    reader.readAsText(blob);\n\n    //\n    let result = await promise;\n\n    //\n    if (typeof options?.filter === \"string\" && options?.filter?.length) {\n        //\n        result = new DOMParser().parseFromString(result, \"text/html\").body;\n        //\n        result = [...result.querySelectorAll(options.filter)];\n        //\n        result = result.length\n            ? result.map((x) => x.outerHTML).reduce((x, y) => x + y)\n            : result;\n    }\n\n    //\n    if (\n        options?.element instanceof HTMLElement &&\n        typeof result === \"string\" &&\n        result?.length\n    ) {\n        options.element.innerHTML = result;\n    }\n\n    //\n    return promise;\n};\n"]}